{"version":3,"file":"chat-widget.min.js","sources":["../node_modules/svelte/src/runtime/internal/utils.js","../node_modules/svelte/src/runtime/internal/lifecycle.js","../node_modules/svelte/src/runtime/internal/dom.js","../node_modules/svelte/src/runtime/internal/scheduler.js","../node_modules/svelte/src/runtime/internal/transitions.js","../node_modules/svelte/src/runtime/internal/each.js","../node_modules/svelte/src/runtime/internal/Component.js","../node_modules/marked/lib/marked.esm.js","../node_modules/svelte/src/runtime/internal/disclose-version/index.js","../node_modules/svelte/src/shared/version.js","../AIChatWidget.svelte","../embed.js"],"sourcesContent":["/** @returns {void} */\nexport function noop() {}\n\nexport const identity = (x) => x;\n\n/**\n * @template T\n * @template S\n * @param {T} tar\n * @param {S} src\n * @returns {T & S}\n */\nexport function assign(tar, src) {\n\t// @ts-ignore\n\tfor (const k in src) tar[k] = src[k];\n\treturn /** @type {T & S} */ (tar);\n}\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n/**\n * @param {any} value\n * @returns {value is PromiseLike<any>}\n */\nexport function is_promise(value) {\n\treturn (\n\t\t!!value &&\n\t\t(typeof value === 'object' || typeof value === 'function') &&\n\t\ttypeof (/** @type {any} */ (value).then) === 'function'\n\t);\n}\n\n/** @returns {void} */\nexport function add_location(element, file, line, column, char) {\n\telement.__svelte_meta = {\n\t\tloc: { file, line, column, char }\n\t};\n}\n\nexport function run(fn) {\n\treturn fn();\n}\n\nexport function blank_object() {\n\treturn Object.create(null);\n}\n\n/**\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function run_all(fns) {\n\tfns.forEach(run);\n}\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\n/** @returns {boolean} */\nexport function safe_not_equal(a, b) {\n\treturn a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';\n}\n\nlet src_url_equal_anchor;\n\n/**\n * @param {string} element_src\n * @param {string} url\n * @returns {boolean}\n */\nexport function src_url_equal(element_src, url) {\n\tif (element_src === url) return true;\n\tif (!src_url_equal_anchor) {\n\t\tsrc_url_equal_anchor = document.createElement('a');\n\t}\n\t// This is actually faster than doing URL(..).href\n\tsrc_url_equal_anchor.href = url;\n\treturn element_src === src_url_equal_anchor.href;\n}\n\n/** @param {string} srcset */\nfunction split_srcset(srcset) {\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\n}\n\n/**\n * @param {HTMLSourceElement | HTMLImageElement} element_srcset\n * @param {string | undefined | null} srcset\n * @returns {boolean}\n */\nexport function srcset_url_equal(element_srcset, srcset) {\n\tconst element_urls = split_srcset(element_srcset.srcset);\n\tconst urls = split_srcset(srcset || '');\n\n\treturn (\n\t\turls.length === element_urls.length &&\n\t\turls.every(\n\t\t\t([url, width], i) =>\n\t\t\t\twidth === element_urls[i][1] &&\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\n\t\t\t\t// contain relative or absolute URLs.\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\n\t\t)\n\t);\n}\n\n/** @returns {boolean} */\nexport function not_equal(a, b) {\n\treturn a != a ? b == b : a !== b;\n}\n\n/** @returns {boolean} */\nexport function is_empty(obj) {\n\treturn Object.keys(obj).length === 0;\n}\n\n/** @returns {void} */\nexport function validate_store(store, name) {\n\tif (store != null && typeof store.subscribe !== 'function') {\n\t\tthrow new Error(`'${name}' is not a store with a 'subscribe' method`);\n\t}\n}\n\nexport function subscribe(store, ...callbacks) {\n\tif (store == null) {\n\t\tfor (const callback of callbacks) {\n\t\t\tcallback(undefined);\n\t\t}\n\t\treturn noop;\n\t}\n\tconst unsub = store.subscribe(...callbacks);\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\n\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n *\n * https://svelte.dev/docs/svelte-store#get\n * @template T\n * @param {import('../store/public.js').Readable<T>} store\n * @returns {T}\n */\nexport function get_store_value(store) {\n\tlet value;\n\tsubscribe(store, (_) => (value = _))();\n\treturn value;\n}\n\n/** @returns {void} */\nexport function component_subscribe(component, store, callback) {\n\tcomponent.$$.on_destroy.push(subscribe(store, callback));\n}\n\nexport function create_slot(definition, ctx, $$scope, fn) {\n\tif (definition) {\n\t\tconst slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n\t\treturn definition[0](slot_ctx);\n\t}\n}\n\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n\treturn definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;\n}\n\nexport function get_slot_changes(definition, $$scope, dirty, fn) {\n\tif (definition[2] && fn) {\n\t\tconst lets = definition[2](fn(dirty));\n\t\tif ($$scope.dirty === undefined) {\n\t\t\treturn lets;\n\t\t}\n\t\tif (typeof lets === 'object') {\n\t\t\tconst merged = [];\n\t\t\tconst len = Math.max($$scope.dirty.length, lets.length);\n\t\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\t\tmerged[i] = $$scope.dirty[i] | lets[i];\n\t\t\t}\n\t\t\treturn merged;\n\t\t}\n\t\treturn $$scope.dirty | lets;\n\t}\n\treturn $$scope.dirty;\n}\n\n/** @returns {void} */\nexport function update_slot_base(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tslot_changes,\n\tget_slot_context_fn\n) {\n\tif (slot_changes) {\n\t\tconst slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n\t\tslot.p(slot_context, slot_changes);\n\t}\n}\n\n/** @returns {void} */\nexport function update_slot(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tdirty,\n\tget_slot_changes_fn,\n\tget_slot_context_fn\n) {\n\tconst slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n\tupdate_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\n\n/** @returns {any[] | -1} */\nexport function get_all_dirty_from_scope($$scope) {\n\tif ($$scope.ctx.length > 32) {\n\t\tconst dirty = [];\n\t\tconst length = $$scope.ctx.length / 32;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tdirty[i] = -1;\n\t\t}\n\t\treturn dirty;\n\t}\n\treturn -1;\n}\n\n/** @returns {{}} */\nexport function exclude_internal_props(props) {\n\tconst result = {};\n\tfor (const k in props) if (k[0] !== '$') result[k] = props[k];\n\treturn result;\n}\n\n/** @returns {{}} */\nexport function compute_rest_props(props, keys) {\n\tconst rest = {};\n\tkeys = new Set(keys);\n\tfor (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];\n\treturn rest;\n}\n\n/** @returns {{}} */\nexport function compute_slots(slots) {\n\tconst result = {};\n\tfor (const key in slots) {\n\t\tresult[key] = true;\n\t}\n\treturn result;\n}\n\n/** @returns {(this: any, ...args: any[]) => void} */\nexport function once(fn) {\n\tlet ran = false;\n\treturn function (...args) {\n\t\tif (ran) return;\n\t\tran = true;\n\t\tfn.call(this, ...args);\n\t};\n}\n\nexport function null_to_empty(value) {\n\treturn value == null ? '' : value;\n}\n\nexport function set_store_value(store, ret, value) {\n\tstore.set(value);\n\treturn ret;\n}\n\nexport const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\nexport function action_destroyer(action_result) {\n\treturn action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\n/** @param {number | string} value\n * @returns {[number, string]}\n */\nexport function split_css_unit(value) {\n\tconst split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n\treturn split ? [parseFloat(split[1]), split[2] || 'px'] : [/** @type {number} */ (value), 'px'];\n}\n\nexport const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n","import { custom_event } from './dom.js';\n\nexport let current_component;\n\n/** @returns {void} */\nexport function set_current_component(component) {\n\tcurrent_component = component;\n}\n\nexport function get_current_component() {\n\tif (!current_component) throw new Error('Function called outside component initialization');\n\treturn current_component;\n}\n\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#beforeupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function beforeUpdate(fn) {\n\tget_current_component().$$.before_update.push(fn);\n}\n\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\n *\n * `onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs/svelte#onmount\n * @template T\n * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn\n * @returns {void}\n */\nexport function onMount(fn) {\n\tget_current_component().$$.on_mount.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#afterupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function afterUpdate(fn) {\n\tget_current_component().$$.after_update.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs/svelte#ondestroy\n * @param {() => any} fn\n * @returns {void}\n */\nexport function onDestroy(fn) {\n\tget_current_component().$$.on_destroy.push(fn);\n}\n\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n * ```ts\n * const dispatch = createEventDispatcher<{\n *  loaded: never; // does not take a detail argument\n *  change: string; // takes a detail argument of type string, which is required\n *  optional: number | null; // takes an optional detail argument of type number\n * }>();\n * ```\n *\n * https://svelte.dev/docs/svelte#createeventdispatcher\n * @template {Record<string, any>} [EventMap=any]\n * @returns {import('./public.js').EventDispatcher<EventMap>}\n */\nexport function createEventDispatcher() {\n\tconst component = get_current_component();\n\treturn (type, detail, { cancelable = false } = {}) => {\n\t\tconst callbacks = component.$$.callbacks[type];\n\t\tif (callbacks) {\n\t\t\t// TODO are there situations where events could be dispatched\n\t\t\t// in a server (non-DOM) environment?\n\t\t\tconst event = custom_event(/** @type {string} */ (type), detail, { cancelable });\n\t\t\tcallbacks.slice().forEach((fn) => {\n\t\t\t\tfn.call(component, event);\n\t\t\t});\n\t\t\treturn !event.defaultPrevented;\n\t\t}\n\t\treturn true;\n\t};\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#setcontext\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tget_current_component().$$.context.set(key, context);\n\treturn context;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#getcontext\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\treturn get_current_component().$$.context.get(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs/svelte#getallcontexts\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\treturn get_current_component().$$.context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#hascontext\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\treturn get_current_component().$$.context.has(key);\n}\n\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\n/**\n * @param component\n * @param event\n * @returns {void}\n */\nexport function bubble(component, event) {\n\tconst callbacks = component.$$.callbacks[event.type];\n\tif (callbacks) {\n\t\t// @ts-ignore\n\t\tcallbacks.slice().forEach((fn) => fn.call(this, event));\n\t}\n}\n","import { contenteditable_truthy_values, has_prop } from './utils.js';\n\nimport { ResizeObserverSingleton } from './ResizeObserverSingleton.js';\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\n\n/**\n * @returns {void}\n */\nexport function start_hydrating() {\n\tis_hydrating = true;\n}\n\n/**\n * @returns {void}\n */\nexport function end_hydrating() {\n\tis_hydrating = false;\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {(index: number) => number} key\n * @param {number} value\n * @returns {number}\n */\nfunction upper_bound(low, high, key, value) {\n\t// Return first index of value larger than input value in the range [low, high)\n\twhile (low < high) {\n\t\tconst mid = low + ((high - low) >> 1);\n\t\tif (key(mid) <= value) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\n\n/**\n * @param {NodeEx} target\n * @returns {void}\n */\nfunction init_hydrate(target) {\n\tif (target.hydrate_init) return;\n\ttarget.hydrate_init = true;\n\t// We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n\n\tlet children = /** @type {ArrayLike<NodeEx2>} */ (target.childNodes);\n\t// If target is <head>, there may be children without claim_order\n\tif (target.nodeName === 'HEAD') {\n\t\tconst my_children = [];\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\tconst node = children[i];\n\t\t\tif (node.claim_order !== undefined) {\n\t\t\t\tmy_children.push(node);\n\t\t\t}\n\t\t}\n\t\tchildren = my_children;\n\t}\n\t/*\n\t * Reorder claimed children optimally.\n\t * We can reorder claimed children optimally by finding the longest subsequence of\n\t * nodes that are already claimed in order and only moving the rest. The longest\n\t * subsequence of nodes that are claimed in order can be found by\n\t * computing the longest increasing subsequence of .claim_order values.\n\t *\n\t * This algorithm is optimal in generating the least amount of reorder operations\n\t * possible.\n\t *\n\t * Proof:\n\t * We know that, given a set of reordering operations, the nodes that do not move\n\t * always form an increasing subsequence, since they do not move among each other\n\t * meaning that they must be already ordered among each other. Thus, the maximal\n\t * set of nodes that do not move form a longest increasing subsequence.\n\t */\n\t// Compute longest increasing subsequence\n\t// m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n\tconst m = new Int32Array(children.length + 1);\n\t// Predecessor indices + 1\n\tconst p = new Int32Array(children.length);\n\tm[0] = -1;\n\tlet longest = 0;\n\tfor (let i = 0; i < children.length; i++) {\n\t\tconst current = children[i].claim_order;\n\t\t// Find the largest subsequence length such that it ends in a value less than our current value\n\t\t// upper_bound returns first greater value, so we subtract one\n\t\t// with fast path for when we are on the current longest subsequence\n\t\tconst seq_len =\n\t\t\t(longest > 0 && children[m[longest]].claim_order <= current\n\t\t\t\t? longest + 1\n\t\t\t\t: upper_bound(1, longest, (idx) => children[m[idx]].claim_order, current)) - 1;\n\t\tp[i] = m[seq_len] + 1;\n\t\tconst new_len = seq_len + 1;\n\t\t// We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n\t\tm[new_len] = i;\n\t\tlongest = Math.max(new_len, longest);\n\t}\n\t// The longest increasing subsequence of nodes (initially reversed)\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst lis = [];\n\t// The rest of the nodes, nodes that will be moved\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst to_move = [];\n\tlet last = children.length - 1;\n\tfor (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n\t\tlis.push(children[cur - 1]);\n\t\tfor (; last >= cur; last--) {\n\t\t\tto_move.push(children[last]);\n\t\t}\n\t\tlast--;\n\t}\n\tfor (; last >= 0; last--) {\n\t\tto_move.push(children[last]);\n\t}\n\tlis.reverse();\n\t// We sort the nodes being moved to guarantee that their insertion order matches the claim order\n\tto_move.sort((a, b) => a.claim_order - b.claim_order);\n\t// Finally, we move the nodes\n\tfor (let i = 0, j = 0; i < to_move.length; i++) {\n\t\twhile (j < lis.length && to_move[i].claim_order >= lis[j].claim_order) {\n\t\t\tj++;\n\t\t}\n\t\tconst anchor = j < lis.length ? lis[j] : null;\n\t\ttarget.insertBefore(to_move[i], anchor);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append(target, node) {\n\ttarget.appendChild(node);\n}\n\n/**\n * @param {Node} target\n * @param {string} style_sheet_id\n * @param {string} styles\n * @returns {void}\n */\nexport function append_styles(target, style_sheet_id, styles) {\n\tconst append_styles_to = get_root_for_style(target);\n\tif (!append_styles_to.getElementById(style_sheet_id)) {\n\t\tconst style = element('style');\n\t\tstyle.id = style_sheet_id;\n\t\tstyle.textContent = styles;\n\t\tappend_stylesheet(append_styles_to, style);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {ShadowRoot | Document}\n */\nexport function get_root_for_style(node) {\n\tif (!node) return document;\n\tconst root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n\tif (root && /** @type {ShadowRoot} */ (root).host) {\n\t\treturn /** @type {ShadowRoot} */ (root);\n\t}\n\treturn node.ownerDocument;\n}\n\n/**\n * @param {Node} node\n * @returns {CSSStyleSheet}\n */\nexport function append_empty_stylesheet(node) {\n\tconst style_element = element('style');\n\t// For transitions to work without 'style-src: unsafe-inline' Content Security Policy,\n\t// these empty tags need to be allowed with a hash as a workaround until we move to the Web Animations API.\n\t// Using the hash for the empty string (for an empty tag) works in all browsers except Safari.\n\t// So as a workaround for the workaround, when we append empty style tags we set their content to /* empty */.\n\t// The hash 'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=' will then work even in Safari.\n\tstyle_element.textContent = '/* empty */';\n\tappend_stylesheet(get_root_for_style(node), style_element);\n\treturn style_element.sheet;\n}\n\n/**\n * @param {ShadowRoot | Document} node\n * @param {HTMLStyleElement} style\n * @returns {CSSStyleSheet}\n */\nfunction append_stylesheet(node, style) {\n\tappend(/** @type {Document} */ (node).head || node, style);\n\treturn style.sheet;\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @returns {void}\n */\nexport function append_hydration(target, node) {\n\tif (is_hydrating) {\n\t\tinit_hydrate(target);\n\t\tif (\n\t\t\ttarget.actual_end_child === undefined ||\n\t\t\t(target.actual_end_child !== null && target.actual_end_child.parentNode !== target)\n\t\t) {\n\t\t\ttarget.actual_end_child = target.firstChild;\n\t\t}\n\t\t// Skip nodes of undefined ordering\n\t\twhile (target.actual_end_child !== null && target.actual_end_child.claim_order === undefined) {\n\t\t\ttarget.actual_end_child = target.actual_end_child.nextSibling;\n\t\t}\n\t\tif (node !== target.actual_end_child) {\n\t\t\t// We only insert if the ordering of this node should be modified or the parent node is not target\n\t\t\tif (node.claim_order !== undefined || node.parentNode !== target) {\n\t\t\t\ttarget.insertBefore(node, target.actual_end_child);\n\t\t\t}\n\t\t} else {\n\t\t\ttarget.actual_end_child = node.nextSibling;\n\t\t}\n\t} else if (node.parentNode !== target || node.nextSibling !== null) {\n\t\ttarget.appendChild(node);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert(target, node, anchor) {\n\ttarget.insertBefore(node, anchor || null);\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @param {NodeEx} [anchor]\n * @returns {void}\n */\nexport function insert_hydration(target, node, anchor) {\n\tif (is_hydrating && !anchor) {\n\t\tappend_hydration(target, node);\n\t} else if (node.parentNode !== target || node.nextSibling != anchor) {\n\t\ttarget.insertBefore(node, anchor || null);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {void}\n */\nexport function detach(node) {\n\tif (node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function destroy_each(iterations, detaching) {\n\tfor (let i = 0; i < iterations.length; i += 1) {\n\t\tif (iterations[i]) iterations[i].d(detaching);\n\t}\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element(name) {\n\treturn document.createElement(name);\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @param {string} is\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element_is(name, is) {\n\treturn document.createElement(name, { is });\n}\n\n/**\n * @template T\n * @template {keyof T} K\n * @param {T} obj\n * @param {K[]} exclude\n * @returns {Pick<T, Exclude<keyof T, K>>}\n */\nexport function object_without_properties(obj, exclude) {\n\tconst target = /** @type {Pick<T, Exclude<keyof T, K>>} */ ({});\n\tfor (const k in obj) {\n\t\tif (\n\t\t\thas_prop(obj, k) &&\n\t\t\t// @ts-ignore\n\t\t\texclude.indexOf(k) === -1\n\t\t) {\n\t\t\t// @ts-ignore\n\t\t\ttarget[k] = obj[k];\n\t\t}\n\t}\n\treturn target;\n}\n\n/**\n * @template {keyof SVGElementTagNameMap} K\n * @param {K} name\n * @returns {SVGElement}\n */\nexport function svg_element(name) {\n\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\n}\n\n/**\n * @param {string} data\n * @returns {Text}\n */\nexport function text(data) {\n\treturn document.createTextNode(data);\n}\n\n/**\n * @returns {Text} */\nexport function space() {\n\treturn text(' ');\n}\n\n/**\n * @returns {Text} */\nexport function empty() {\n\treturn text('');\n}\n\n/**\n * @param {string} content\n * @returns {Comment}\n */\nexport function comment(content) {\n\treturn document.createComment(content);\n}\n\n/**\n * @param {EventTarget} node\n * @param {string} event\n * @param {EventListenerOrEventListenerObject} handler\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\n * @returns {() => void}\n */\nexport function listen(node, event, handler, options) {\n\tnode.addEventListener(event, handler, options);\n\treturn () => node.removeEventListener(event, handler, options);\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function prevent_default(fn) {\n\treturn function (event) {\n\t\tevent.preventDefault();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopPropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_immediate_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopImmediatePropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function self(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.target === this) fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function trusted(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.isTrusted) fn.call(this, event);\n\t};\n}\n\n/**\n * @param {Element} node\n * @param {string} attribute\n * @param {string} [value]\n * @returns {void}\n */\nexport function attr(node, attribute, value) {\n\tif (value == null) node.removeAttribute(attribute);\n\telse if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_attributes(node, attributes) {\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n\tfor (const key in attributes) {\n\t\tif (attributes[key] == null) {\n\t\t\tnode.removeAttribute(key);\n\t\t} else if (key === 'style') {\n\t\t\tnode.style.cssText = attributes[key];\n\t\t} else if (key === '__value') {\n\t\t\t/** @type {any} */ (node).value = node[key] = attributes[key];\n\t\t} else if (\n\t\t\tdescriptors[key] &&\n\t\t\tdescriptors[key].set &&\n\t\t\talways_set_through_set_attribute.indexOf(key) === -1\n\t\t) {\n\t\t\tnode[key] = attributes[key];\n\t\t} else {\n\t\t\tattr(node, key, attributes[key]);\n\t\t}\n\t}\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_svg_attributes(node, attributes) {\n\tfor (const key in attributes) {\n\t\tattr(node, key, attributes[key]);\n\t}\n}\n\n/**\n * @param {Record<string, unknown>} data_map\n * @returns {void}\n */\nexport function set_custom_element_data_map(node, data_map) {\n\tObject.keys(data_map).forEach((key) => {\n\t\tset_custom_element_data(node, key, data_map[key]);\n\t});\n}\n\n/**\n * @returns {void} */\nexport function set_custom_element_data(node, prop, value) {\n\tconst lower = prop.toLowerCase(); // for backwards compatibility with existing behavior we do lowercase first\n\tif (lower in node) {\n\t\tnode[lower] = typeof node[lower] === 'boolean' && value === '' ? true : value;\n\t} else if (prop in node) {\n\t\tnode[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n\t} else {\n\t\tattr(node, prop, value);\n\t}\n}\n\n/**\n * @param {string} tag\n */\nexport function set_dynamic_element_data(tag) {\n\treturn /-/.test(tag) ? set_custom_element_data_map : set_attributes;\n}\n\n/**\n * @returns {void}\n */\nexport function xlink_attr(node, attribute, value) {\n\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\n\n/**\n * @param {HTMLElement} node\n * @returns {string}\n */\nexport function get_svelte_dataset(node) {\n\treturn node.dataset.svelteH;\n}\n\n/**\n * @returns {unknown[]} */\nexport function get_binding_group_value(group, __value, checked) {\n\tconst value = new Set();\n\tfor (let i = 0; i < group.length; i += 1) {\n\t\tif (group[i].checked) value.add(group[i].__value);\n\t}\n\tif (!checked) {\n\t\tvalue.delete(__value);\n\t}\n\treturn Array.from(value);\n}\n\n/**\n * @param {HTMLInputElement[]} group\n * @returns {{ p(...inputs: HTMLInputElement[]): void; r(): void; }}\n */\nexport function init_binding_group(group) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\treturn {\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\t_inputs.forEach((input) => group.push(input));\n\t\t},\n\t\t/* remove */ r() {\n\t\t\t_inputs.forEach((input) => group.splice(group.indexOf(input), 1));\n\t\t}\n\t};\n}\n\n/**\n * @param {number[]} indexes\n * @returns {{ u(new_indexes: number[]): void; p(...inputs: HTMLInputElement[]): void; r: () => void; }}\n */\nexport function init_binding_group_dynamic(group, indexes) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _group = get_binding_group(group);\n\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\n\tfunction get_binding_group(group) {\n\t\tfor (let i = 0; i < indexes.length; i++) {\n\t\t\tgroup = group[indexes[i]] = group[indexes[i]] || [];\n\t\t}\n\t\treturn group;\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction push() {\n\t\t_inputs.forEach((input) => _group.push(input));\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction remove() {\n\t\t_inputs.forEach((input) => _group.splice(_group.indexOf(input), 1));\n\t}\n\treturn {\n\t\t/* update */ u(new_indexes) {\n\t\t\tindexes = new_indexes;\n\t\t\tconst new_group = get_binding_group(group);\n\t\t\tif (new_group !== _group) {\n\t\t\t\tremove();\n\t\t\t\t_group = new_group;\n\t\t\t\tpush();\n\t\t\t}\n\t\t},\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\tpush();\n\t\t},\n\t\t/* remove */ r: remove\n\t};\n}\n\n/** @returns {number} */\nexport function to_number(value) {\n\treturn value === '' ? null : +value;\n}\n\n/** @returns {any[]} */\nexport function time_ranges_to_array(ranges) {\n\tconst array = [];\n\tfor (let i = 0; i < ranges.length; i += 1) {\n\t\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\n\t}\n\treturn array;\n}\n\n/**\n * @param {Element} element\n * @returns {ChildNode[]}\n */\nexport function children(element) {\n\treturn Array.from(element.childNodes);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {void}\n */\nfunction init_claim_info(nodes) {\n\tif (nodes.claim_info === undefined) {\n\t\tnodes.claim_info = { last_index: 0, total_claimed: 0 };\n\t}\n}\n\n/**\n * @template {ChildNodeEx} R\n * @param {ChildNodeArray} nodes\n * @param {(node: ChildNodeEx) => node is R} predicate\n * @param {(node: ChildNodeEx) => ChildNodeEx | undefined} process_node\n * @param {() => R} create_node\n * @param {boolean} dont_update_last_index\n * @returns {R}\n */\nfunction claim_node(nodes, predicate, process_node, create_node, dont_update_last_index = false) {\n\t// Try to find nodes in an order such that we lengthen the longest increasing subsequence\n\tinit_claim_info(nodes);\n\tconst result_node = (() => {\n\t\t// We first try to find an element after the previous one\n\t\tfor (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// Otherwise, we try to find one before\n\t\t// We iterate in reverse so that we don't go too far back\n\t\tfor (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t} else if (replacement === undefined) {\n\t\t\t\t\t// Since we spliced before the last_index, we decrease it\n\t\t\t\t\tnodes.claim_info.last_index--;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// If we can't find any matching node, we create a new one\n\t\treturn create_node();\n\t})();\n\tresult_node.claim_order = nodes.claim_info.total_claimed;\n\tnodes.claim_info.total_claimed += 1;\n\treturn result_node;\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @param {(name: string) => Element | SVGElement} create_element\n * @returns {Element | SVGElement}\n */\nfunction claim_element_base(nodes, name, attributes, create_element) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Element | SVGElement} */\n\t\t(node) => node.nodeName === name,\n\t\t/** @param {Element} node */\n\t\t(node) => {\n\t\t\tconst remove = [];\n\t\t\tfor (let j = 0; j < node.attributes.length; j++) {\n\t\t\t\tconst attribute = node.attributes[j];\n\t\t\t\tif (!attributes[attribute.name]) {\n\t\t\t\t\tremove.push(attribute.name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tremove.forEach((v) => node.removeAttribute(v));\n\t\t\treturn undefined;\n\t\t},\n\t\t() => create_element(name)\n\t);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_svg_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, svg_element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Text}\n */\nexport function claim_text(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Text} */\n\t\t(node) => node.nodeType === 3,\n\t\t/** @param {Text} node */\n\t\t(node) => {\n\t\t\tconst data_str = '' + data;\n\t\t\tif (node.data.startsWith(data_str)) {\n\t\t\t\tif (node.data.length !== data_str.length) {\n\t\t\t\t\treturn node.splitText(data_str.length);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode.data = data_str;\n\t\t\t}\n\t\t},\n\t\t() => text(data),\n\t\ttrue // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n\t);\n}\n\n/**\n * @returns {Text} */\nexport function claim_space(nodes) {\n\treturn claim_text(nodes, ' ');\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Comment}\n */\nexport function claim_comment(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Comment} */\n\t\t(node) => node.nodeType === 8,\n\t\t/** @param {Comment} node */\n\t\t(node) => {\n\t\t\tnode.data = '' + data;\n\t\t\treturn undefined;\n\t\t},\n\t\t() => comment(data),\n\t\ttrue\n\t);\n}\n\nfunction get_comment_idx(nodes, text, start) {\n\tfor (let i = start; i < nodes.length; i += 1) {\n\t\tconst node = nodes[i];\n\t\tif (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * @param {boolean} is_svg\n * @returns {HtmlTagHydration}\n */\nexport function claim_html_tag(nodes, is_svg) {\n\t// find html opening tag\n\tconst start_index = get_comment_idx(nodes, 'HTML_TAG_START', 0);\n\tconst end_index = get_comment_idx(nodes, 'HTML_TAG_END', start_index + 1);\n\tif (start_index === -1 || end_index === -1) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\n\tinit_claim_info(nodes);\n\tconst html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n\tdetach(html_tag_nodes[0]);\n\tdetach(html_tag_nodes[html_tag_nodes.length - 1]);\n\tconst claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n\tif (claimed_nodes.length === 0) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\tfor (const n of claimed_nodes) {\n\t\tn.claim_order = nodes.claim_info.total_claimed;\n\t\tnodes.claim_info.total_claimed += 1;\n\t}\n\treturn new HtmlTagHydration(is_svg, claimed_nodes);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data(text, data) {\n\tdata = '' + data;\n\tif (text.data === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_contenteditable(text, data) {\n\tdata = '' + data;\n\tif (text.wholeText === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @param {string} attr_value\n * @returns {void}\n */\nexport function set_data_maybe_contenteditable(text, data, attr_value) {\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\n\t\tset_data_contenteditable(text, data);\n\t} else {\n\t\tset_data(text, data);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_input_value(input, value) {\n\tinput.value = value == null ? '' : value;\n}\n\n/**\n * @returns {void} */\nexport function set_input_type(input, type) {\n\ttry {\n\t\tinput.type = type;\n\t} catch (e) {\n\t\t// do nothing\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_style(node, key, value, important) {\n\tif (value == null) {\n\t\tnode.style.removeProperty(key);\n\t} else {\n\t\tnode.style.setProperty(key, value, important ? 'important' : '');\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_option(select, value, mounting) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\tif (option.__value === value) {\n\t\t\toption.selected = true;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (!mounting || value !== undefined) {\n\t\tselect.selectedIndex = -1; // no option should be selected\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_options(select, value) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\toption.selected = ~value.indexOf(option.__value);\n\t}\n}\n\nexport function select_value(select) {\n\tconst selected_option = select.querySelector(':checked');\n\treturn selected_option && selected_option.__value;\n}\n\nexport function select_multiple_value(select) {\n\treturn [].map.call(select.querySelectorAll(':checked'), (option) => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\n\n/**\n * @type {boolean} */\nlet crossorigin;\n\n/**\n * @returns {boolean} */\nexport function is_crossorigin() {\n\tif (crossorigin === undefined) {\n\t\tcrossorigin = false;\n\t\ttry {\n\t\t\tif (typeof window !== 'undefined' && window.parent) {\n\t\t\t\tvoid window.parent.document;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tcrossorigin = true;\n\t\t}\n\t}\n\treturn crossorigin;\n}\n\n/**\n * @param {HTMLElement} node\n * @param {() => void} fn\n * @returns {() => void}\n */\nexport function add_iframe_resize_listener(node, fn) {\n\tconst computed_style = getComputedStyle(node);\n\tif (computed_style.position === 'static') {\n\t\tnode.style.position = 'relative';\n\t}\n\tconst iframe = element('iframe');\n\tiframe.setAttribute(\n\t\t'style',\n\t\t'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n\t\t\t'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;'\n\t);\n\tiframe.setAttribute('aria-hidden', 'true');\n\tiframe.tabIndex = -1;\n\tconst crossorigin = is_crossorigin();\n\n\t/**\n\t * @type {() => void}\n\t */\n\tlet unsubscribe;\n\tif (crossorigin) {\n\t\tiframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n\t\tunsubscribe = listen(\n\t\t\twindow,\n\t\t\t'message',\n\t\t\t/** @param {MessageEvent} event */ (event) => {\n\t\t\t\tif (event.source === iframe.contentWindow) fn();\n\t\t\t}\n\t\t);\n\t} else {\n\t\tiframe.src = 'about:blank';\n\t\tiframe.onload = () => {\n\t\t\tunsubscribe = listen(iframe.contentWindow, 'resize', fn);\n\t\t\t// make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n\t\t\t// see https://github.com/sveltejs/svelte/issues/4233\n\t\t\tfn();\n\t\t};\n\t}\n\tappend(node, iframe);\n\treturn () => {\n\t\tif (crossorigin) {\n\t\t\tunsubscribe();\n\t\t} else if (unsubscribe && iframe.contentWindow) {\n\t\t\tunsubscribe();\n\t\t}\n\t\tdetach(iframe);\n\t};\n}\nexport const resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'content-box'\n});\nexport const resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'border-box'\n});\nexport const resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton(\n\t{ box: 'device-pixel-content-box' }\n);\nexport { ResizeObserverSingleton };\n\n/**\n * @returns {void} */\nexport function toggle_class(element, name, toggle) {\n\t// The `!!` is required because an `undefined` flag means flipping the current state.\n\telement.classList.toggle(name, !!toggle);\n}\n\n/**\n * @template T\n * @param {string} type\n * @param {T} [detail]\n * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]\n * @returns {CustomEvent<T>}\n */\nexport function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\n}\n\n/**\n * @param {string} selector\n * @param {HTMLElement} parent\n * @returns {ChildNodeArray}\n */\nexport function query_selector_all(selector, parent = document.body) {\n\treturn Array.from(parent.querySelectorAll(selector));\n}\n\n/**\n * @param {string} nodeId\n * @param {HTMLElement} head\n * @returns {any[]}\n */\nexport function head_selector(nodeId, head) {\n\tconst result = [];\n\tlet started = 0;\n\tfor (const node of head.childNodes) {\n\t\tif (node.nodeType === 8 /* comment node */) {\n\t\t\tconst comment = node.textContent.trim();\n\t\t\tif (comment === `HEAD_${nodeId}_END`) {\n\t\t\t\tstarted -= 1;\n\t\t\t\tresult.push(node);\n\t\t\t} else if (comment === `HEAD_${nodeId}_START`) {\n\t\t\t\tstarted += 1;\n\t\t\t\tresult.push(node);\n\t\t\t}\n\t\t} else if (started > 0) {\n\t\t\tresult.push(node);\n\t\t}\n\t}\n\treturn result;\n}\n/** */\nexport class HtmlTag {\n\t/**\n\t * @private\n\t * @default false\n\t */\n\tis_svg = false;\n\t/** parent for creating node */\n\te = undefined;\n\t/** html tag nodes */\n\tn = undefined;\n\t/** target */\n\tt = undefined;\n\t/** anchor */\n\ta = undefined;\n\tconstructor(is_svg = false) {\n\t\tthis.is_svg = is_svg;\n\t\tthis.e = this.n = null;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tthis.h(html);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @param {HTMLElement | SVGElement} target\n\t * @param {HTMLElement | SVGElement} anchor\n\t * @returns {void}\n\t */\n\tm(html, target, anchor = null) {\n\t\tif (!this.e) {\n\t\t\tif (this.is_svg)\n\t\t\t\tthis.e = svg_element(/** @type {keyof SVGElementTagNameMap} */ (target.nodeName));\n\t\t\t/** #7364  target for <template> may be provided as #document-fragment(11) */ else\n\t\t\t\tthis.e = element(\n\t\t\t\t\t/** @type {keyof HTMLElementTagNameMap} */ (\n\t\t\t\t\t\ttarget.nodeType === 11 ? 'TEMPLATE' : target.nodeName\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tthis.t =\n\t\t\t\ttarget.tagName !== 'TEMPLATE'\n\t\t\t\t\t? target\n\t\t\t\t\t: /** @type {HTMLTemplateElement} */ (target).content;\n\t\t\tthis.c(html);\n\t\t}\n\t\tthis.i(anchor);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\th(html) {\n\t\tthis.e.innerHTML = html;\n\t\tthis.n = Array.from(\n\t\t\tthis.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes\n\t\t);\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert(this.t, this.n[i], anchor);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tp(html) {\n\t\tthis.d();\n\t\tthis.h(html);\n\t\tthis.i(this.a);\n\t}\n\n\t/**\n\t * @returns {void} */\n\td() {\n\t\tthis.n.forEach(detach);\n\t}\n}\n\nexport class HtmlTagHydration extends HtmlTag {\n\t/** @type {Element[]} hydration claimed nodes */\n\tl = undefined;\n\n\tconstructor(is_svg = false, claimed_nodes) {\n\t\tsuper(is_svg);\n\t\tthis.e = this.n = null;\n\t\tthis.l = claimed_nodes;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tif (this.l) {\n\t\t\tthis.n = this.l;\n\t\t} else {\n\t\t\tsuper.c(html);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert_hydration(this.t, this.n[i], anchor);\n\t\t}\n\t}\n}\n\n/**\n * @param {NamedNodeMap} attributes\n * @returns {{}}\n */\nexport function attribute_to_object(attributes) {\n\tconst result = {};\n\tfor (const attribute of attributes) {\n\t\tresult[attribute.name] = attribute.value;\n\t}\n\treturn result;\n}\n\nconst escaped = {\n\t'\"': '&quot;',\n\t'&': '&amp;',\n\t'<': '&lt;'\n};\n\nconst regex_attribute_characters_to_escape = /[\"&<]/g;\n\n/**\n * Note that the attribute itself should be surrounded in double quotes\n * @param {any} attribute\n */\nfunction escape_attribute(attribute) {\n\treturn String(attribute).replace(regex_attribute_characters_to_escape, (match) => escaped[match]);\n}\n\n/**\n * @param {Record<string, string>} attributes\n */\nexport function stringify_spread(attributes) {\n\tlet str = ' ';\n\tfor (const key in attributes) {\n\t\tif (attributes[key] != null) {\n\t\t\tstr += `${key}=\"${escape_attribute(attributes[key])}\" `;\n\t\t}\n\t}\n\n\treturn str;\n}\n\n/**\n * @param {HTMLElement} element\n * @returns {{}}\n */\nexport function get_custom_elements_slots(element) {\n\tconst result = {};\n\telement.childNodes.forEach(\n\t\t/** @param {Element} node */ (node) => {\n\t\t\tresult[node.slot || 'default'] = true;\n\t\t}\n\t);\n\treturn result;\n}\n\nexport function construct_svelte_component(component, props) {\n\treturn new component(props);\n}\n\n/**\n * @typedef {Node & {\n * \tclaim_order?: number;\n * \thydrate_init?: true;\n * \tactual_end_child?: NodeEx;\n * \tchildNodes: NodeListOf<NodeEx>;\n * }} NodeEx\n */\n\n/** @typedef {ChildNode & NodeEx} ChildNodeEx */\n\n/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */\n\n/**\n * @typedef {ChildNodeEx[] & {\n * \tclaim_info?: {\n * \t\tlast_index: number;\n * \t\ttotal_claimed: number;\n * \t};\n * }} ChildNodeArray\n */\n","import { run_all } from './utils.js';\nimport { current_component, set_current_component } from './lifecycle.js';\n\nexport const dirty_components = [];\nexport const intros = { enabled: false };\nexport const binding_callbacks = [];\n\nlet render_callbacks = [];\n\nconst flush_callbacks = [];\n\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\n\nlet update_scheduled = false;\n\n/** @returns {void} */\nexport function schedule_update() {\n\tif (!update_scheduled) {\n\t\tupdate_scheduled = true;\n\t\tresolved_promise.then(flush);\n\t}\n}\n\n/** @returns {Promise<void>} */\nexport function tick() {\n\tschedule_update();\n\treturn resolved_promise;\n}\n\n/** @returns {void} */\nexport function add_render_callback(fn) {\n\trender_callbacks.push(fn);\n}\n\n/** @returns {void} */\nexport function add_flush_callback(fn) {\n\tflush_callbacks.push(fn);\n}\n\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\n\nlet flushidx = 0; // Do *not* move this inside the flush() function\n\n/** @returns {void} */\nexport function flush() {\n\t// Do not reenter flush while dirty components are updated, as this can\n\t// result in an infinite loop. Instead, let the inner flush handle it.\n\t// Reentrancy is ok afterwards for bindings etc.\n\tif (flushidx !== 0) {\n\t\treturn;\n\t}\n\tconst saved_component = current_component;\n\tdo {\n\t\t// first, call beforeUpdate functions\n\t\t// and update components\n\t\ttry {\n\t\t\twhile (flushidx < dirty_components.length) {\n\t\t\t\tconst component = dirty_components[flushidx];\n\t\t\t\tflushidx++;\n\t\t\t\tset_current_component(component);\n\t\t\t\tupdate(component.$$);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// reset dirty state to not end up in a deadlocked state and then rethrow\n\t\t\tdirty_components.length = 0;\n\t\t\tflushidx = 0;\n\t\t\tthrow e;\n\t\t}\n\t\tset_current_component(null);\n\t\tdirty_components.length = 0;\n\t\tflushidx = 0;\n\t\twhile (binding_callbacks.length) binding_callbacks.pop()();\n\t\t// then, once components are updated, call\n\t\t// afterUpdate functions. This may cause\n\t\t// subsequent updates...\n\t\tfor (let i = 0; i < render_callbacks.length; i += 1) {\n\t\t\tconst callback = render_callbacks[i];\n\t\t\tif (!seen_callbacks.has(callback)) {\n\t\t\t\t// ...so guard against infinite loops\n\t\t\t\tseen_callbacks.add(callback);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\trender_callbacks.length = 0;\n\t} while (dirty_components.length);\n\twhile (flush_callbacks.length) {\n\t\tflush_callbacks.pop()();\n\t}\n\tupdate_scheduled = false;\n\tseen_callbacks.clear();\n\tset_current_component(saved_component);\n}\n\n/** @returns {void} */\nfunction update($$) {\n\tif ($$.fragment !== null) {\n\t\t$$.update();\n\t\trun_all($$.before_update);\n\t\tconst dirty = $$.dirty;\n\t\t$$.dirty = [-1];\n\t\t$$.fragment && $$.fragment.p($$.ctx, dirty);\n\t\t$$.after_update.forEach(add_render_callback);\n\t}\n}\n\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function flush_render_callbacks(fns) {\n\tconst filtered = [];\n\tconst targets = [];\n\trender_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));\n\ttargets.forEach((c) => c());\n\trender_callbacks = filtered;\n}\n","import { identity as linear, is_function, noop, run_all } from './utils.js';\nimport { now } from './environment.js';\nimport { loop } from './loop.js';\nimport { create_rule, delete_rule } from './style_manager.js';\nimport { custom_event } from './dom.js';\nimport { add_render_callback } from './scheduler.js';\n\n/**\n * @type {Promise<void> | null}\n */\nlet promise;\n\n/**\n * @returns {Promise<void>}\n */\nfunction wait() {\n\tif (!promise) {\n\t\tpromise = Promise.resolve();\n\t\tpromise.then(() => {\n\t\t\tpromise = null;\n\t\t});\n\t}\n\treturn promise;\n}\n\n/**\n * @param {Element} node\n * @param {INTRO | OUTRO | boolean} direction\n * @param {'start' | 'end'} kind\n * @returns {void}\n */\nfunction dispatch(node, direction, kind) {\n\tnode.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\n\nconst outroing = new Set();\n\n/**\n * @type {Outro}\n */\nlet outros;\n\n/**\n * @returns {void} */\nexport function group_outros() {\n\toutros = {\n\t\tr: 0,\n\t\tc: [],\n\t\tp: outros // parent group\n\t};\n}\n\n/**\n * @returns {void} */\nexport function check_outros() {\n\tif (!outros.r) {\n\t\trun_all(outros.c);\n\t}\n\toutros = outros.p;\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} [local]\n * @returns {void}\n */\nexport function transition_in(block, local) {\n\tif (block && block.i) {\n\t\toutroing.delete(block);\n\t\tblock.i(local);\n\t}\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} local\n * @param {0 | 1} [detach]\n * @param {() => void} [callback]\n * @returns {void}\n */\nexport function transition_out(block, local, detach, callback) {\n\tif (block && block.o) {\n\t\tif (outroing.has(block)) return;\n\t\toutroing.add(block);\n\t\toutros.c.push(() => {\n\t\t\toutroing.delete(block);\n\t\t\tif (callback) {\n\t\t\t\tif (detach) block.d(1);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\tblock.o(local);\n\t} else if (callback) {\n\t\tcallback();\n\t}\n}\n\n/**\n * @type {import('../transition/public.js').TransitionConfig}\n */\nconst null_transition = { duration: 0 };\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ start(): void; invalidate(): void; end(): void; }}\n */\nexport function create_in_transition(node, fn, params) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'in' };\n\tlet config = fn(node, params, options);\n\tlet running = false;\n\tlet animation_name;\n\tlet task;\n\tlet uid = 0;\n\n\t/**\n\t * @returns {void} */\n\tfunction cleanup() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\t\tif (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n\t\ttick(0, 1);\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tif (task) task.abort();\n\t\trunning = true;\n\t\tadd_render_callback(() => dispatch(node, true, 'start'));\n\t\ttask = loop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(1, 0);\n\t\t\t\t\tdispatch(node, true, 'end');\n\t\t\t\t\tcleanup();\n\t\t\t\t\treturn (running = false);\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\tlet started = false;\n\treturn {\n\t\tstart() {\n\t\t\tif (started) return;\n\t\t\tstarted = true;\n\t\t\tdelete_rule(node);\n\t\t\tif (is_function(config)) {\n\t\t\t\tconfig = config(options);\n\t\t\t\twait().then(go);\n\t\t\t} else {\n\t\t\t\tgo();\n\t\t\t}\n\t\t},\n\t\tinvalidate() {\n\t\t\tstarted = false;\n\t\t},\n\t\tend() {\n\t\t\tif (running) {\n\t\t\t\tcleanup();\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ end(reset: any): void; }}\n */\nexport function create_out_transition(node, fn, params) {\n\t/** @type {TransitionOptions} */\n\tconst options = { direction: 'out' };\n\tlet config = fn(node, params, options);\n\tlet running = true;\n\tlet animation_name;\n\tconst group = outros;\n\tgroup.r += 1;\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\tif (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tadd_render_callback(() => dispatch(node, false, 'start'));\n\n\t\tif ('inert' in node) {\n\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\tnode.inert = true;\n\t\t}\n\n\t\tloop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(0, 1);\n\t\t\t\t\tdispatch(node, false, 'end');\n\t\t\t\t\tif (!--group.r) {\n\t\t\t\t\t\t// this will result in `end()` being called,\n\t\t\t\t\t\t// so we don't need to clean up here\n\t\t\t\t\t\trun_all(group.c);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(1 - t, t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\n\tif (is_function(config)) {\n\t\twait().then(() => {\n\t\t\t// @ts-ignore\n\t\t\tconfig = config(options);\n\t\t\tgo();\n\t\t});\n\t} else {\n\t\tgo();\n\t}\n\n\treturn {\n\t\tend(reset) {\n\t\t\tif (reset && 'inert' in node) {\n\t\t\t\tnode.inert = original_inert_value;\n\t\t\t}\n\t\t\tif (reset && config.tick) {\n\t\t\t\tconfig.tick(1, 0);\n\t\t\t}\n\t\t\tif (running) {\n\t\t\t\tif (animation_name) delete_rule(node, animation_name);\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @param {boolean} intro\n * @returns {{ run(b: 0 | 1): void; end(): void; }}\n */\nexport function create_bidirectional_transition(node, fn, params, intro) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'both' };\n\tlet config = fn(node, params, options);\n\tlet t = intro ? 0 : 1;\n\n\t/**\n\t * @type {Program | null} */\n\tlet running_program = null;\n\n\t/**\n\t * @type {PendingProgram | null} */\n\tlet pending_program = null;\n\tlet animation_name = null;\n\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction clear_animation() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @param {PendingProgram} program\n\t * @param {number} duration\n\t * @returns {Program}\n\t */\n\tfunction init(program, duration) {\n\t\tconst d = /** @type {Program['d']} */ (program.b - t);\n\t\tduration *= Math.abs(d);\n\t\treturn {\n\t\t\ta: t,\n\t\t\tb: program.b,\n\t\t\td,\n\t\t\tduration,\n\t\t\tstart: program.start,\n\t\t\tend: program.start + duration,\n\t\t\tgroup: program.group\n\t\t};\n\t}\n\n\t/**\n\t * @param {INTRO | OUTRO} b\n\t * @returns {void}\n\t */\n\tfunction go(b) {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\t/**\n\t\t * @type {PendingProgram} */\n\t\tconst program = {\n\t\t\tstart: now() + delay,\n\t\t\tb\n\t\t};\n\n\t\tif (!b) {\n\t\t\t// @ts-ignore todo: improve typings\n\t\t\tprogram.group = outros;\n\t\t\toutros.r += 1;\n\t\t}\n\n\t\tif ('inert' in node) {\n\t\t\tif (b) {\n\t\t\t\tif (original_inert_value !== undefined) {\n\t\t\t\t\t// aborted/reversed outro — restore previous inert value\n\t\t\t\t\tnode.inert = original_inert_value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\t\tnode.inert = true;\n\t\t\t}\n\t\t}\n\n\t\tif (running_program || pending_program) {\n\t\t\tpending_program = program;\n\t\t} else {\n\t\t\t// if this is an intro, and there's a delay, we need to do\n\t\t\t// an initial tick and/or apply CSS animation immediately\n\t\t\tif (css) {\n\t\t\t\tclear_animation();\n\t\t\t\tanimation_name = create_rule(node, t, b, duration, delay, easing, css);\n\t\t\t}\n\t\t\tif (b) tick(0, 1);\n\t\t\trunning_program = init(program, duration);\n\t\t\tadd_render_callback(() => dispatch(node, b, 'start'));\n\t\t\tloop((now) => {\n\t\t\t\tif (pending_program && now > pending_program.start) {\n\t\t\t\t\trunning_program = init(pending_program, duration);\n\t\t\t\t\tpending_program = null;\n\t\t\t\t\tdispatch(node, running_program.b, 'start');\n\t\t\t\t\tif (css) {\n\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\tanimation_name = create_rule(\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\trunning_program.b,\n\t\t\t\t\t\t\trunning_program.duration,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\teasing,\n\t\t\t\t\t\t\tconfig.css\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (running_program) {\n\t\t\t\t\tif (now >= running_program.end) {\n\t\t\t\t\t\ttick((t = running_program.b), 1 - t);\n\t\t\t\t\t\tdispatch(node, running_program.b, 'end');\n\t\t\t\t\t\tif (!pending_program) {\n\t\t\t\t\t\t\t// we're done\n\t\t\t\t\t\t\tif (running_program.b) {\n\t\t\t\t\t\t\t\t// intro — we can tidy up immediately\n\t\t\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// outro — needs to be coordinated\n\t\t\t\t\t\t\t\tif (!--running_program.group.r) run_all(running_program.group.c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trunning_program = null;\n\t\t\t\t\t} else if (now >= running_program.start) {\n\t\t\t\t\t\tconst p = now - running_program.start;\n\t\t\t\t\t\tt = running_program.a + running_program.d * easing(p / running_program.duration);\n\t\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !!(running_program || pending_program);\n\t\t\t});\n\t\t}\n\t}\n\treturn {\n\t\trun(b) {\n\t\t\tif (is_function(config)) {\n\t\t\t\twait().then(() => {\n\t\t\t\t\tconst opts = { direction: b ? 'in' : 'out' };\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconfig = config(opts);\n\t\t\t\t\tgo(b);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgo(b);\n\t\t\t}\n\t\t},\n\t\tend() {\n\t\t\tclear_animation();\n\t\t\trunning_program = pending_program = null;\n\t\t}\n\t};\n}\n\n/** @typedef {1} INTRO */\n/** @typedef {0} OUTRO */\n/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */\n/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */\n\n/**\n * @typedef {Object} Outro\n * @property {number} r\n * @property {Function[]} c\n * @property {Object} p\n */\n\n/**\n * @typedef {Object} PendingProgram\n * @property {number} start\n * @property {INTRO|OUTRO} b\n * @property {Outro} [group]\n */\n\n/**\n * @typedef {Object} Program\n * @property {number} a\n * @property {INTRO|OUTRO} b\n * @property {1|-1} d\n * @property {number} duration\n * @property {number} start\n * @property {number} end\n * @property {Outro} [group]\n */\n","import { transition_in, transition_out } from './transitions.js';\nimport { run_all } from './utils.js';\n\n// general each functions:\n\nexport function ensure_array_like(array_like_or_iterator) {\n\treturn array_like_or_iterator?.length !== undefined\n\t\t? array_like_or_iterator\n\t\t: Array.from(array_like_or_iterator);\n}\n\n// keyed each functions:\n\n/** @returns {void} */\nexport function destroy_block(block, lookup) {\n\tblock.d(1);\n\tlookup.delete(block.key);\n}\n\n/** @returns {void} */\nexport function outro_and_destroy_block(block, lookup) {\n\ttransition_out(block, 1, 1, () => {\n\t\tlookup.delete(block.key);\n\t});\n}\n\n/** @returns {void} */\nexport function fix_and_destroy_block(block, lookup) {\n\tblock.f();\n\tdestroy_block(block, lookup);\n}\n\n/** @returns {void} */\nexport function fix_and_outro_and_destroy_block(block, lookup) {\n\tblock.f();\n\toutro_and_destroy_block(block, lookup);\n}\n\n/** @returns {any[]} */\nexport function update_keyed_each(\n\told_blocks,\n\tdirty,\n\tget_key,\n\tdynamic,\n\tctx,\n\tlist,\n\tlookup,\n\tnode,\n\tdestroy,\n\tcreate_each_block,\n\tnext,\n\tget_context\n) {\n\tlet o = old_blocks.length;\n\tlet n = list.length;\n\tlet i = o;\n\tconst old_indexes = {};\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\n\tconst new_blocks = [];\n\tconst new_lookup = new Map();\n\tconst deltas = new Map();\n\tconst updates = [];\n\ti = n;\n\twhile (i--) {\n\t\tconst child_ctx = get_context(ctx, list, i);\n\t\tconst key = get_key(child_ctx);\n\t\tlet block = lookup.get(key);\n\t\tif (!block) {\n\t\t\tblock = create_each_block(key, child_ctx);\n\t\t\tblock.c();\n\t\t} else if (dynamic) {\n\t\t\t// defer updates until all the DOM shuffling is done\n\t\t\tupdates.push(() => block.p(child_ctx, dirty));\n\t\t}\n\t\tnew_lookup.set(key, (new_blocks[i] = block));\n\t\tif (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));\n\t}\n\tconst will_move = new Set();\n\tconst did_move = new Set();\n\t/** @returns {void} */\n\tfunction insert(block) {\n\t\ttransition_in(block, 1);\n\t\tblock.m(node, next);\n\t\tlookup.set(block.key, block);\n\t\tnext = block.first;\n\t\tn--;\n\t}\n\twhile (o && n) {\n\t\tconst new_block = new_blocks[n - 1];\n\t\tconst old_block = old_blocks[o - 1];\n\t\tconst new_key = new_block.key;\n\t\tconst old_key = old_block.key;\n\t\tif (new_block === old_block) {\n\t\t\t// do nothing\n\t\t\tnext = new_block.first;\n\t\t\to--;\n\t\t\tn--;\n\t\t} else if (!new_lookup.has(old_key)) {\n\t\t\t// remove old block\n\t\t\tdestroy(old_block, lookup);\n\t\t\to--;\n\t\t} else if (!lookup.has(new_key) || will_move.has(new_key)) {\n\t\t\tinsert(new_block);\n\t\t} else if (did_move.has(old_key)) {\n\t\t\to--;\n\t\t} else if (deltas.get(new_key) > deltas.get(old_key)) {\n\t\t\tdid_move.add(new_key);\n\t\t\tinsert(new_block);\n\t\t} else {\n\t\t\twill_move.add(old_key);\n\t\t\to--;\n\t\t}\n\t}\n\twhile (o--) {\n\t\tconst old_block = old_blocks[o];\n\t\tif (!new_lookup.has(old_block.key)) destroy(old_block, lookup);\n\t}\n\twhile (n) insert(new_blocks[n - 1]);\n\trun_all(updates);\n\treturn new_blocks;\n}\n\n/** @returns {void} */\nexport function validate_each_keys(ctx, list, get_context, get_key) {\n\tconst keys = new Map();\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst key = get_key(get_context(ctx, list, i));\n\t\tif (keys.has(key)) {\n\t\t\tlet value = '';\n\t\t\ttry {\n\t\t\t\tvalue = `with value '${String(key)}' `;\n\t\t\t} catch (e) {\n\t\t\t\t// can't stringify\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(\n\t\t\t\t\tkey\n\t\t\t\t)} and ${i} ${value}are duplicates`\n\t\t\t);\n\t\t}\n\t\tkeys.set(key, i);\n\t}\n}\n","import {\n\tadd_render_callback,\n\tflush,\n\tflush_render_callbacks,\n\tschedule_update,\n\tdirty_components\n} from './scheduler.js';\nimport { current_component, set_current_component } from './lifecycle.js';\nimport { blank_object, is_empty, is_function, run, run_all, noop } from './utils.js';\nimport {\n\tchildren,\n\tdetach,\n\tstart_hydrating,\n\tend_hydrating,\n\tget_custom_elements_slots,\n\tinsert,\n\telement,\n\tattr\n} from './dom.js';\nimport { transition_in } from './transitions.js';\n\n/** @returns {void} */\nexport function bind(component, name, callback) {\n\tconst index = component.$$.props[name];\n\tif (index !== undefined) {\n\t\tcomponent.$$.bound[index] = callback;\n\t\tcallback(component.$$.ctx[index]);\n\t}\n}\n\n/** @returns {void} */\nexport function create_component(block) {\n\tblock && block.c();\n}\n\n/** @returns {void} */\nexport function claim_component(block, parent_nodes) {\n\tblock && block.l(parent_nodes);\n}\n\n/** @returns {void} */\nexport function mount_component(component, target, anchor) {\n\tconst { fragment, after_update } = component.$$;\n\tfragment && fragment.m(target, anchor);\n\t// onMount happens before the initial afterUpdate\n\tadd_render_callback(() => {\n\t\tconst new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n\t\t// if the component was destroyed immediately\n\t\t// it will update the `$$.on_destroy` reference to `null`.\n\t\t// the destructured on_destroy may still reference to the old array\n\t\tif (component.$$.on_destroy) {\n\t\t\tcomponent.$$.on_destroy.push(...new_on_destroy);\n\t\t} else {\n\t\t\t// Edge case - component was destroyed immediately,\n\t\t\t// most likely as a result of a binding initialising\n\t\t\trun_all(new_on_destroy);\n\t\t}\n\t\tcomponent.$$.on_mount = [];\n\t});\n\tafter_update.forEach(add_render_callback);\n}\n\n/** @returns {void} */\nexport function destroy_component(component, detaching) {\n\tconst $$ = component.$$;\n\tif ($$.fragment !== null) {\n\t\tflush_render_callbacks($$.after_update);\n\t\trun_all($$.on_destroy);\n\t\t$$.fragment && $$.fragment.d(detaching);\n\t\t// TODO null out other refs, including component.$$ (but need to\n\t\t// preserve final state?)\n\t\t$$.on_destroy = $$.fragment = null;\n\t\t$$.ctx = [];\n\t}\n}\n\n/** @returns {void} */\nfunction make_dirty(component, i) {\n\tif (component.$$.dirty[0] === -1) {\n\t\tdirty_components.push(component);\n\t\tschedule_update();\n\t\tcomponent.$$.dirty.fill(0);\n\t}\n\tcomponent.$$.dirty[(i / 31) | 0] |= 1 << i % 31;\n}\n\n// TODO: Document the other params\n/**\n * @param {SvelteComponent} component\n * @param {import('./public.js').ComponentConstructorOptions} options\n *\n * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.\n * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.\n * This will be the `add_css` function from the compiled component.\n *\n * @returns {void}\n */\nexport function init(\n\tcomponent,\n\toptions,\n\tinstance,\n\tcreate_fragment,\n\tnot_equal,\n\tprops,\n\tappend_styles = null,\n\tdirty = [-1]\n) {\n\tconst parent_component = current_component;\n\tset_current_component(component);\n\t/** @type {import('./private.js').T$$} */\n\tconst $$ = (component.$$ = {\n\t\tfragment: null,\n\t\tctx: [],\n\t\t// state\n\t\tprops,\n\t\tupdate: noop,\n\t\tnot_equal,\n\t\tbound: blank_object(),\n\t\t// lifecycle\n\t\ton_mount: [],\n\t\ton_destroy: [],\n\t\ton_disconnect: [],\n\t\tbefore_update: [],\n\t\tafter_update: [],\n\t\tcontext: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n\t\t// everything else\n\t\tcallbacks: blank_object(),\n\t\tdirty,\n\t\tskip_bound: false,\n\t\troot: options.target || parent_component.$$.root\n\t});\n\tappend_styles && append_styles($$.root);\n\tlet ready = false;\n\t$$.ctx = instance\n\t\t? instance(component, options.props || {}, (i, ret, ...rest) => {\n\t\t\t\tconst value = rest.length ? rest[0] : ret;\n\t\t\t\tif ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {\n\t\t\t\t\tif (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);\n\t\t\t\t\tif (ready) make_dirty(component, i);\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t  })\n\t\t: [];\n\t$$.update();\n\tready = true;\n\trun_all($$.before_update);\n\t// `false` as a special case of no DOM component\n\t$$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n\tif (options.target) {\n\t\tif (options.hydrate) {\n\t\t\tstart_hydrating();\n\t\t\t// TODO: what is the correct type here?\n\t\t\t// @ts-expect-error\n\t\t\tconst nodes = children(options.target);\n\t\t\t$$.fragment && $$.fragment.l(nodes);\n\t\t\tnodes.forEach(detach);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t$$.fragment && $$.fragment.c();\n\t\t}\n\t\tif (options.intro) transition_in(component.$$.fragment);\n\t\tmount_component(component, options.target, options.anchor);\n\t\tend_hydrating();\n\t\tflush();\n\t}\n\tset_current_component(parent_component);\n}\n\nexport let SvelteElement;\n\nif (typeof HTMLElement === 'function') {\n\tSvelteElement = class extends HTMLElement {\n\t\t/** The Svelte component constructor */\n\t\t$$ctor;\n\t\t/** Slots */\n\t\t$$s;\n\t\t/** The Svelte component instance */\n\t\t$$c;\n\t\t/** Whether or not the custom element is connected */\n\t\t$$cn = false;\n\t\t/** Component props data */\n\t\t$$d = {};\n\t\t/** `true` if currently in the process of reflecting component props back to attributes */\n\t\t$$r = false;\n\t\t/** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */\n\t\t$$p_d = {};\n\t\t/** @type {Record<string, Function[]>} Event listeners */\n\t\t$$l = {};\n\t\t/** @type {Map<Function, Function>} Event listener unsubscribe functions */\n\t\t$$l_u = new Map();\n\n\t\tconstructor($$componentCtor, $$slots, use_shadow_dom) {\n\t\t\tsuper();\n\t\t\tthis.$$ctor = $$componentCtor;\n\t\t\tthis.$$s = $$slots;\n\t\t\tif (use_shadow_dom) {\n\t\t\t\tthis.attachShadow({ mode: 'open' });\n\t\t\t}\n\t\t}\n\n\t\taddEventListener(type, listener, options) {\n\t\t\t// We can't determine upfront if the event is a custom event or not, so we have to\n\t\t\t// listen to both. If someone uses a custom event with the same name as a regular\n\t\t\t// browser event, this fires twice - we can't avoid that.\n\t\t\tthis.$$l[type] = this.$$l[type] || [];\n\t\t\tthis.$$l[type].push(listener);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t}\n\t\t\tsuper.addEventListener(type, listener, options);\n\t\t}\n\n\t\tremoveEventListener(type, listener, options) {\n\t\t\tsuper.removeEventListener(type, listener, options);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$l_u.get(listener);\n\t\t\t\tif (unsub) {\n\t\t\t\t\tunsub();\n\t\t\t\t\tthis.$$l_u.delete(listener);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tasync connectedCallback() {\n\t\t\tthis.$$cn = true;\n\t\t\tif (!this.$$c) {\n\t\t\t\t// We wait one tick to let possible child slot elements be created/mounted\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tif (!this.$$cn || this.$$c) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfunction create_slot(name) {\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tlet node;\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\tc: function create() {\n\t\t\t\t\t\t\t\tnode = element('slot');\n\t\t\t\t\t\t\t\tif (name !== 'default') {\n\t\t\t\t\t\t\t\t\tattr(node, 'name', name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {HTMLElement} target\n\t\t\t\t\t\t\t * @param {HTMLElement} [anchor]\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tm: function mount(target, anchor) {\n\t\t\t\t\t\t\t\tinsert(target, node, anchor);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\td: function destroy(detaching) {\n\t\t\t\t\t\t\t\tif (detaching) {\n\t\t\t\t\t\t\t\t\tdetach(node);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn obj;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst $$slots = {};\n\t\t\t\tconst existing_slots = get_custom_elements_slots(this);\n\t\t\t\tfor (const name of this.$$s) {\n\t\t\t\t\tif (name in existing_slots) {\n\t\t\t\t\t\t$$slots[name] = [create_slot(name)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const attribute of this.attributes) {\n\t\t\t\t\t// this.$$data takes precedence over this.attributes\n\t\t\t\t\tconst name = this.$$g_p(attribute.name);\n\t\t\t\t\tif (!(name in this.$$d)) {\n\t\t\t\t\t\tthis.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, 'toProp');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Port over props that were set programmatically before ce was initialized\n\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\tif (!(key in this.$$d) && this[key] !== undefined) {\n\t\t\t\t\t\tthis.$$d[key] = this[key]; // don't transform, these were set through JavaScript\n\t\t\t\t\t\tdelete this[key]; // remove the property that shadows the getter/setter\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$c = new this.$$ctor({\n\t\t\t\t\ttarget: this.shadowRoot || this,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...this.$$d,\n\t\t\t\t\t\t$$slots,\n\t\t\t\t\t\t$$scope: {\n\t\t\t\t\t\t\tctx: []\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Reflect component props as attributes\n\t\t\t\tconst reflect_attributes = () => {\n\t\t\t\t\tthis.$$r = true;\n\t\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\t\tthis.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];\n\t\t\t\t\t\tif (this.$$p_d[key].reflect) {\n\t\t\t\t\t\t\tconst attribute_value = get_custom_element_value(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tthis.$$d[key],\n\t\t\t\t\t\t\t\tthis.$$p_d,\n\t\t\t\t\t\t\t\t'toAttribute'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (attribute_value == null) {\n\t\t\t\t\t\t\t\tthis.removeAttribute(this.$$p_d[key].attribute || key);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.setAttribute(this.$$p_d[key].attribute || key, attribute_value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.$$r = false;\n\t\t\t\t};\n\t\t\t\tthis.$$c.$$.after_update.push(reflect_attributes);\n\t\t\t\treflect_attributes(); // once initially because after_update is added too late for first render\n\n\t\t\t\tfor (const type in this.$$l) {\n\t\t\t\t\tfor (const listener of this.$$l[type]) {\n\t\t\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$l = {};\n\t\t\t}\n\t\t}\n\n\t\t// We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte\n\t\t// and setting attributes through setAttribute etc, this is helpful\n\t\tattributeChangedCallback(attr, _oldValue, newValue) {\n\t\t\tif (this.$$r) return;\n\t\t\tattr = this.$$g_p(attr);\n\t\t\tthis.$$d[attr] = get_custom_element_value(attr, newValue, this.$$p_d, 'toProp');\n\t\t\tthis.$$c?.$set({ [attr]: this.$$d[attr] });\n\t\t}\n\n\t\tdisconnectedCallback() {\n\t\t\tthis.$$cn = false;\n\t\t\t// In a microtask, because this could be a move within the DOM\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tif (!this.$$cn && this.$$c) {\n\t\t\t\t\tthis.$$c.$destroy();\n\t\t\t\t\tthis.$$c = undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t$$g_p(attribute_name) {\n\t\t\treturn (\n\t\t\t\tObject.keys(this.$$p_d).find(\n\t\t\t\t\t(key) =>\n\t\t\t\t\t\tthis.$$p_d[key].attribute === attribute_name ||\n\t\t\t\t\t\t(!this.$$p_d[key].attribute && key.toLowerCase() === attribute_name)\n\t\t\t\t) || attribute_name\n\t\t\t);\n\t\t}\n\t};\n}\n\n/**\n * @param {string} prop\n * @param {any} value\n * @param {Record<string, CustomElementPropDefinition>} props_definition\n * @param {'toAttribute' | 'toProp'} [transform]\n */\nfunction get_custom_element_value(prop, value, props_definition, transform) {\n\tconst type = props_definition[prop]?.type;\n\tvalue = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;\n\tif (!transform || !props_definition[prop]) {\n\t\treturn value;\n\t} else if (transform === 'toAttribute') {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value == null ? null : JSON.stringify(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value ? '' : null;\n\t\t\tcase 'Number':\n\t\t\t\treturn value == null ? null : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t} else {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value && JSON.parse(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value; // conversion already handled above\n\t\t\tcase 'Number':\n\t\t\t\treturn value != null ? +value : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n}\n\n/**\n * @internal\n *\n * Turn a Svelte component into a custom element.\n * @param {import('./public.js').ComponentType} Component  A Svelte component constructor\n * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe\n * @param {string[]} slots  The slots to create\n * @param {string[]} accessors  Other accessors besides the ones for props the component has\n * @param {boolean} use_shadow_dom  Whether to use shadow DOM\n * @param {(ce: new () => HTMLElement) => new () => HTMLElement} [extend]\n */\nexport function create_custom_element(\n\tComponent,\n\tprops_definition,\n\tslots,\n\taccessors,\n\tuse_shadow_dom,\n\textend\n) {\n\tlet Class = class extends SvelteElement {\n\t\tconstructor() {\n\t\t\tsuper(Component, slots, use_shadow_dom);\n\t\t\tthis.$$p_d = props_definition;\n\t\t}\n\t\tstatic get observedAttributes() {\n\t\t\treturn Object.keys(props_definition).map((key) =>\n\t\t\t\t(props_definition[key].attribute || key).toLowerCase()\n\t\t\t);\n\t\t}\n\t};\n\tObject.keys(props_definition).forEach((prop) => {\n\t\tObject.defineProperty(Class.prototype, prop, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tvalue = get_custom_element_value(prop, value, props_definition);\n\t\t\t\tthis.$$d[prop] = value;\n\t\t\t\tthis.$$c?.$set({ [prop]: value });\n\t\t\t}\n\t\t});\n\t});\n\taccessors.forEach((accessor) => {\n\t\tObject.defineProperty(Class.prototype, accessor, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c?.[accessor];\n\t\t\t}\n\t\t});\n\t});\n\tif (extend) {\n\t\t// @ts-expect-error - assigning here is fine\n\t\tClass = extend(Class);\n\t}\n\tComponent.element = /** @type {any} */ (Class);\n\treturn Class;\n}\n\n/**\n * Base class for Svelte components. Used when dev=false.\n *\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n */\nexport class SvelteComponent {\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$ = undefined;\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$set = undefined;\n\n\t/** @returns {void} */\n\t$destroy() {\n\t\tdestroy_component(this, 1);\n\t\tthis.$destroy = noop;\n\t}\n\n\t/**\n\t * @template {Extract<keyof Events, string>} K\n\t * @param {K} type\n\t * @param {((e: Events[K]) => void) | null | undefined} callback\n\t * @returns {() => void}\n\t */\n\t$on(type, callback) {\n\t\tif (!is_function(callback)) {\n\t\t\treturn noop;\n\t\t}\n\t\tconst callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\n\t\tcallbacks.push(callback);\n\t\treturn () => {\n\t\t\tconst index = callbacks.indexOf(callback);\n\t\t\tif (index !== -1) callbacks.splice(index, 1);\n\t\t};\n\t}\n\n\t/**\n\t * @param {Partial<Props>} props\n\t * @returns {void}\n\t */\n\t$set(props) {\n\t\tif (this.$$set && !is_empty(props)) {\n\t\t\tthis.$$.skip_bound = true;\n\t\t\tthis.$$set(props);\n\t\t\tthis.$$.skip_bound = false;\n\t\t}\n\t}\n}\n\n/**\n * @typedef {Object} CustomElementPropDefinition\n * @property {string} [attribute]\n * @property {boolean} [reflect]\n * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]\n */\n","/**\n * marked v14.1.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text),\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^(?: {1,4}| {0,3}\\t)/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^[ \\t]*$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    const htmlBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}<[a-z].*>`, 'i');\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(/\\t/g, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(/\\t/g, '    ').search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n[ \\t]*\\n[ \\t]*$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1]),\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(langString)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","import { PUBLIC_VERSION } from '../../../shared/version.js';\n\nif (typeof window !== 'undefined')\n\t// @ts-ignore\n\t(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);\n","// generated during release, do not modify\n\n/**\n * The current version, as set in package.json.\n *\n * https://svelte.dev/docs/svelte-compiler#svelte-version\n * @type {string}\n */\nexport const VERSION = '4.2.19';\nexport const PUBLIC_VERSION = '4';\n","<script>\n  import { onMount, tick } from 'svelte';\n  import { marked } from 'marked';\n\n  export let title = 'AI Sales Assistant';\n  export let apiUrl;\n  export let brandColor = '#00264c';\n  export let initialMessage = 'Ciao, come posso aiutarti?';\n  export let buttonIcon = '💬';\n  export let ctaText = 'Chiedi informazioni';\n  export let position = 'bottom-right';\n  export let openInNewTab = true;\n  export let enableUTM = true;\n  export let persistentSession = false;\n  export let sessionExpiration = 24; // Default to 24 hours\n\n  let isChatVisible = false;\n  let messages = [];\n  let userInput = '';\n  let isLoading = false;\n  let chatMessages;\n  let isLoadingHistory = false;\n\n  const sessionId = persistentSession ? (localStorage.getItem('chatSessionId') || generateUUID()) : generateUUID();\n  if (persistentSession) localStorage.setItem('chatSessionId', sessionId);\n\n  $: colorScheme = generateColorScheme(brandColor);\n  $: isImageUrl = buttonIcon.match(/\\.(jpeg|jpg|gif|png)$/) != null;\n  $: isSvg = buttonIcon.trim().startsWith('<svg');\n\n  let db; // IndexedDB database instance\n\n  // Initialize IndexedDB\n  function initDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('ChatHistoryDB', 1);\n\n      request.onupgradeneeded = (event) => {\n        db = event.target.result;\n        const objectStore = db.createObjectStore('messages', { keyPath: 'id' });\n        objectStore.createIndex('sessionId', 'sessionId', { unique: false });\n      };\n\n      request.onsuccess = (event) => {\n        db = event.target.result;\n        resolve(); // Resolve the promise when the DB is ready\n      };\n\n      request.onerror = (event) => {\n        console.error('IndexedDB error:', event.target.error);\n        reject(event.target.error); // Reject the promise on error\n      };\n    });\n  }\n\n  function toggleChat() {\n    isChatVisible = !isChatVisible;\n    if (isChatVisible) {\n      tick().then(() => {\n        if (chatMessages) {\n          chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n      });\n    }\n  }\n\n  function addMessageToUI(rawText, sender) {\n    let content = '';\n    let productCarousel = '';\n    let url = '';\n    let ctaTextToUse = ctaText;\n    if (sender === 'bot') {\n      let jsonResponse = typeof rawText === 'string' ? JSON.parse(rawText) : rawText;\n      content = marked.parse(jsonResponse.response);\n      url = jsonResponse.url || '';\n      ctaTextToUse = jsonResponse.ctaText || ctaText;\n      if (jsonResponse.products && jsonResponse.products.length > 0) {\n        productCarousel = createProductCarousel(jsonResponse.products);\n      }\n    } else {\n      content = rawText;\n    }\n    messages = [...messages, { content, sender, productCarousel, url, ctaText: ctaTextToUse }];\n    tick().then(() => {\n      if (sender === 'user') {\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n      }\n    });\n  }\n\n  function createProductCarousel(products) {\n    return `\n      <div class=\"product-carousel\">\n        ${products.map(product => `\n          <div class=\"carousel-product\">\n            <img src=\"${product.immagine}\" alt=\"${product.nome}\">\n            <h4>${product.nome}</h4>\n            <p>${product.prezzo}</p>\n            <a href=\"${addUtmParams(product.url, 'chat', 'chatbot', 'chatbot')}\" target=\"_blank\">Acquista</a>\n          </div>\n        `).join('')}\n      </div>\n    `;\n  }\n\n  function addUtmParams(url, source, medium, campaign) {\n    if (!enableUTM) return url; // Return the base URL without UTM parameters\n\n    const urlObj = new URL(url, window.location.origin);\n    urlObj.searchParams.set('utm_source', source);\n    urlObj.searchParams.set('utm_medium', medium);\n    urlObj.searchParams.set('utm_campaign', campaign);\n    return urlObj.toString();\n  }\n\n  async function sendMessage() {\n    const message = userInput.trim();\n    if (message) {\n      addMessage(message, 'user');\n      userInput = '';\n      isLoading = true;\n\n      const params = new URLSearchParams({\n        sessionId: sessionId,\n        action: 'sendMessage',\n        chatInput: message,\n      });\n\n      try {\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: params.toString(),\n        });\n\n        const data = await response.json();\n        addMessage(data, 'bot');\n      } catch (error) {\n        console.error('Error:', error);\n        addMessage('Sorry, there was an error processing your request.', 'bot');\n      } finally {\n        isLoading = false;\n      }\n    }\n  }\n\n  function generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  function generateColorScheme(brandColor) {\n    const r = parseInt(brandColor.slice(1, 3), 16);\n    const g = parseInt(brandColor.slice(3, 5), 16);\n    const b = parseInt(brandColor.slice(5, 7), 16);\n\n    const lighterBackground = `rgba(${r}, ${g}, ${b}, 0.1)`;\n    const textColor = isColorLight(brandColor) ? '#000000' : '#FFFFFF';\n\n    // Generate a contrasting color for the button\n    const buttonColor = generateContrastingColor(brandColor);\n    const buttonTextColor = isColorLight(buttonColor) ? '#000000' : '#FFFFFF';\n\n    return {\n      primaryColor: brandColor,\n      buttonColor: buttonColor,\n      buttonTextColor: buttonTextColor,\n      backgroundColor: lighterBackground,\n      textColor: textColor,\n      loaderColor: brandColor,\n      loaderBackground: lighterBackground\n    };\n  }\n\n  function isColorLight(color) {\n    const r = parseInt(color.slice(1, 3), 16);\n    const g = parseInt(color.slice(3, 5), 16);\n    const b = parseInt(color.slice(5, 7), 16);\n    const brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n    return brightness > 155;\n  }\n\n  function generateContrastingColor(color) {\n    const r = parseInt(color.slice(1, 3), 16);\n    const g = parseInt(color.slice(3, 5), 16);\n    const b = parseInt(color.slice(5, 7), 16);\n\n    // Calculate the perceived brightness\n    const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n\n    let newR, newG, newB;\n\n    if (brightness > 128) {\n      // If the color is light, create a darker contrasting color\n      newR = Math.max(0, r - 100);\n      newG = Math.max(0, g - 100);\n      newB = Math.max(0, b - 100);\n    } else {\n      // If the color is dark, create a lighter contrasting color\n      newR = Math.min(255, r + 100);\n      newG = Math.min(255, g + 100);\n      newB = Math.min(255, b + 100);\n    }\n\n    // Ensure the new color has enough contrast\n    const contrastRatio = getContrastRatio(r, g, b, newR, newG, newB);\n    if (contrastRatio < 4.5) {\n      // If contrast is not enough, adjust further\n      if (brightness > 128) {\n        [newR, newG, newB] = [0, 0, 0]; // Go to black for light colors\n      } else {\n        [newR, newG, newB] = [255, 255, 255]; // Go to white for dark colors\n      }\n    }\n\n    return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;\n  }\n\n  function getContrastRatio(r1, g1, b1, r2, g2, b2) {\n    const l1 = 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1;\n    const l2 = 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2;\n    const contrast = l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n    return contrast;\n  }\n\n  async function loadChatHistory() {\n    if (!persistentSession || !sessionId) return;\n\n    const lastSessionTime = localStorage.getItem('lastSessionTime');\n    const currentTime = Date.now();\n    const sessionExpirationTime = sessionExpiration * 60 * 60 * 1000; // Convert hours to milliseconds\n\n    // Check if the session has expired\n    if (lastSessionTime && (currentTime - lastSessionTime > sessionExpirationTime)) {\n      messages = []; // Wipe chat history\n      localStorage.removeItem('chatSessionId'); // Clear session ID\n      localStorage.removeItem('lastSessionTime'); // Clear last session time\n      await clearChatHistory(); // Clear IndexedDB\n    } else {\n      // Update last session time\n      localStorage.setItem('lastSessionTime', currentTime);\n    }\n\n    isLoadingHistory = true;\n\n    // Load messages from IndexedDB\n    const storedMessages = await getChatHistory();\n    if (storedMessages.length > 0) {\n      messages = storedMessages;\n      messages.forEach(msg => {\n        addMessageToUI(msg.content, msg.type);\n      });\n    } else {\n      addMessageToUI({\n        response: initialMessage,\n        products: [],\n        url: '',\n      }, 'bot');\n    }\n\n    isLoadingHistory = false;\n  }\n\n  async function saveMessage(content, type) {\n    if (!persistentSession) return;\n\n    const message = {\n      id: generateUUID(), // Unique ID for each message\n      sessionId: sessionId,\n      content: content,\n      type: type,\n      timestamp: Date.now()\n    };\n\n    const transaction = db.transaction(['messages'], 'readwrite');\n    const objectStore = transaction.objectStore('messages');\n    objectStore.add(message);\n\n    transaction.onerror = (event) => {\n      console.error('Error saving message:', event.target.error);\n    };\n  }\n\n  async function getChatHistory() {\n    return new Promise((resolve, reject) => {\n      if (!db) {\n        console.error('Database is not initialized.');\n        reject('Database is not initialized.');\n        return;\n      }\n\n      const transaction = db.transaction(['messages'], 'readonly');\n      const objectStore = transaction.objectStore('messages');\n      const request = objectStore.index('sessionId').getAll(sessionId);\n\n      request.onsuccess = (event) => {\n        resolve(event.target.result);\n      };\n\n      request.onerror = (event) => {\n        reject(event.target.error);\n      };\n    });\n  }\n\n  async function clearChatHistory() {\n    const transaction = db.transaction(['messages'], 'readwrite');\n    const objectStore = transaction.objectStore('messages');\n    const request = objectStore.clear();\n\n    request.onsuccess = () => {\n      console.log('Chat history cleared from IndexedDB');\n    };\n\n    request.onerror = (event) => {\n      console.error('Error clearing chat history:', event.target.error);\n    };\n  }\n\n  async function addMessage(rawText, sender) {\n    addMessageToUI(rawText, sender);\n    await saveMessage(rawText, sender);\n  }\n\n  onMount(async () => {\n    try {\n      await initDB(); // Wait for the DB to initialize\n      await loadChatHistory(); // Ensure chat history is loaded after DB is ready\n    } catch (error) {\n      console.error('Failed to initialize database or load chat history:', error);\n    }\n  });\n</script>\n\n<div id=\"chat-widget\"\n     class={position}\n     style:--primary-color={colorScheme.primaryColor}\n     style:--button-color={colorScheme.buttonColor}\n     style:--button-text-color={colorScheme.buttonTextColor}\n     style:--background-color={colorScheme.backgroundColor}\n     style:--text-color={colorScheme.textColor}\n     style:--loader-color={colorScheme.loaderColor}\n     style:--loader-background={colorScheme.loaderBackground}>\n  {#if !isChatVisible}\n    <button id=\"chat-button\" on:click={toggleChat}>\n      {#if isImageUrl}\n        <img src={buttonIcon} alt=\"Chat\" />\n      {:else if isSvg}\n        {@html buttonIcon}\n      {:else}\n        {@html buttonIcon}\n      {/if}\n    </button>\n  {/if}\n\n  {#if isChatVisible}\n    <div id=\"chat-container\">\n      <div id=\"chat-header\">\n        <span>{title}</span>\n        <button id=\"close-chat\" on:click={toggleChat}>×</button>\n      </div>\n      <div id=\"chat-messages\" bind:this={chatMessages}>\n        {#each messages as message}\n          <div class=\"message {message.sender}-message\">\n            {@html message.content}\n          </div>\n          {#if message.url}\n            <a href={addUtmParams(message.url, 'chat', 'chatbot', 'chatbot')} target={openInNewTab ? '_blank' : '_self'} class=\"cta-button\">{message.ctaText}</a>\n          {/if}\n          {#if message.productCarousel}\n            {@html message.productCarousel}\n          {/if}\n        {/each}\n        {#if isLoading}\n          <div class=\"loading-container\">\n            <div class=\"loading\"></div>\n          </div>\n        {/if}\n        {#if isLoadingHistory}\n          <div class=\"loading-container\">\n            <div class=\"loading\"></div>\n            <span class=\"loading-text\">Loading previous messages...</span>\n          </div>\n        {/if}\n      </div>\n      <div id=\"chat-input\">\n        <input type=\"text\" id=\"user-input\" bind:value={userInput} on:keypress={(e) => e.key === 'Enter' && sendMessage()} placeholder=\"Scrivi un messaggio...\">\n        <button id=\"send-button\" on:click={sendMessage}>Invia</button>\n      </div>\n    </div>\n  {/if}\n</div>\n\n<style>\n#chat-widget {\n  position: fixed;\n  z-index: 1000;\n  font-family: Arial, sans-serif;\n}\n\n.top-left {\n  top: 20px;\n  left: 20px;\n}\n\n.top-right {\n  top: 20px;\n  right: 20px;\n}\n\n.bottom-left {\n  bottom: 20px;\n  left: 20px;\n}\n\n.bottom-right {\n  bottom: 20px;\n  right: 20px;\n}\n\n#chat-button {\n  background-color: var(--primary-color) !important;\n  color: var(--text-color) !important;\n  border: none;\n  border-radius: 50%;\n  width: 60px !important;\n  height: 60px !important;\n  cursor: pointer;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n\n#chat-button img {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: cover;\n}\n\n#chat-container {\n  width: 300px;\n  height: 425px;\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n#chat-header {\n  background-color: var(--primary-color);\n  color: var(--text-color);\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#close-chat {\n  background: none;\n  border: none;\n  color: var(--text-color);\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  background-color: white;\n  color: var(--primary-color);\n}\n\n.message {\n  margin-bottom: 10px;\n  padding: 5px 10px;\n  border-radius: 5px;\n  line-height: 1.5rem;\n  height: auto;\n  width: auto;\n  max-width: 80%;\n  display: block;\n  text-transform: none;\n}\n\n.message a {\n  color: var(--primary-color);\n}\n\n.user-message {\n  background-color: var(--primary-color);\n  color: var(--text-color);\n  margin-left: auto;\n}\n\n.bot-message {\n  background-color: var(--background-color);\n  color: var(--primary-color);\n  align-self: flex-start;\n}\n\n.loading-container {\n  display: flex;\n  justify-content: flex-start;\n  width: 100%;\n  margin-bottom: 10px;\n}\n\n.loading {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  border: 3px solid var(--loader-background);\n  border-top: 3px solid var(--loader-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  position: relative;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n#chat-input {\n  display: flex;\n  padding: 10px;\n  background-color: var(--primary-color);\n}\n\n#user-input {\n  flex-grow: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  background-color: white;\n  color: var(--primary-color);\n  font-size: 16px;\n}\n\n#send-button {\n  background-color: var(--button-color);\n  color: var(--button-text-color);\n  border: none;\n  padding: 10px 15px;\n  margin-left: 5px;\n  cursor: pointer;\n  border-radius: 3px;\n  text-wrap: nowrap;\n  min-width: 60px;\n}\n\n.cta-button {\n  display: inline-block;\n  background-color: var(--primary-color);\n  color: var(--text-color);\n  padding: 8px 12px;\n  border-radius: 20px;\n  text-decoration: none;\n  margin-bottom: 10px;\n  font-size: 14px;\n  text-align: center;\n  width: 100%;\n  box-sizing: border-box;\n  transition: background-color 0.3s, color 0.3s;\n}\n\n.cta-button:hover {\n  background-color: var(--button-color);\n  color: var(--button-text-color);\n}\n\n:global(.product-carousel) {\n  display: flex;\n  overflow-x: auto;\n  padding: 10px 0;\n  margin-top: 10px;\n}\n\n:global(.carousel-product) {\n  flex: 0 0 auto;\n  width: 150px;\n  margin-right: 10px;\n  border: 1px solid var(--primary-color);\n  border-radius: 5px;\n  padding: 10px;\n  text-align: center;\n}\n\n:global(.carousel-product img) {\n  width: 100%;\n  height: 100px;\n  object-fit: cover;\n  margin-bottom: 5px;\n}\n\n:global(.carousel-product h4) {\n  margin: 5px 0;\n  font-size: 14px;\n  color: var(--primary-color);\n}\n\n:global(.carousel-product p) {\n  margin: 5px 0;\n  font-weight: bold;\n  color: var(--primary-color);\n}\n\n:global(.carousel-product a) {\n  background-color: var(--primary-color);\n  color: var(--text-color);\n  border: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  border-radius: 3px;\n  font-size: 12px;\n  text-decoration: none;\n  display: inline-block;\n  margin-top: 10px;\n}\n\n.loading-text {\n  margin-left: 10px;\n  color: var(--primary-color);\n  font-size: 14px;\n}\n</style>","import AIChatWidget from \"./AIChatWidget.svelte\";\n\n// Create a new div element to host our Svelte component\nconst targetDiv = document.createElement(\"div\");\n\n// Get the current script tag\nconst currentScript = document.currentScript;\n\n// Insert the new div before the script tag\ncurrentScript.parentNode.insertBefore(targetDiv, currentScript);\n\n// Function to get attribute value with a default\nfunction getAttr(name, defaultValue) {\n    const value = currentScript.getAttribute(name);\n    if (value === null) {\n        return defaultValue;\n    }\n    // Convert \"true\" and \"false\" strings to boolean\n    if (value.toLowerCase() === 'true') {\n        return true;\n    } else if (value.toLowerCase() === 'false') {\n        return false;\n    }\n    return value; // Return the value as is if it's not a boolean string\n}\n\n// Function to get position with a default\nfunction getPosition(defaultValue) {\n    const position = currentScript.getAttribute('data-position');\n    return ['top-left', 'top-right', 'bottom-left', 'bottom-right'].includes(position) ? position : defaultValue;\n}\n\n// Instantiate the Svelte component\nconst chatWidget = new AIChatWidget({\n  target: targetDiv,\n  props: {\n    title: getAttr(\"data-title\", \"AI Sales Assistant\"),\n    apiUrl: getAttr(\"data-api-url\", \"https://your-default-api-url.com\"),\n    brandColor: getAttr(\"data-brand-color\", \"#00264c\"),\n    initialMessage: getAttr(\n      \"data-initial-message\",\n      \"Ciao, come posso aiutarti?\"\n    ),\n    buttonIcon: getAttr(\"data-button-icon\", \"💬\"),\n    ctaText: getAttr(\"data-cta-text\", \"Chiedi informazioni\"),\n    openInNewTab: getAttr(\"data-open-in-new-tab\", true),\n    enableUTM: getAttr(\"data-enable-utm\", true),\n    persistentSession: getAttr(\"data-persistent-session\", false),\n    position: getPosition(\"bottom-right\"),\n    sessionExpiration: getAttr(\"data-session-expiration\", 24)\n  },\n});\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","null_to_empty","value","append","target","node","appendChild","append_styles","style_sheet_id","styles","append_styles_to","root","getRootNode","ownerDocument","host","get_root_for_style","getElementById","style","element","id","textContent","head","sheet","append_stylesheet","insert","anchor","insertBefore","detach","parentNode","removeChild","name","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","set_input_value","input","set_style","key","important","removeProperty","setProperty","HtmlTag","is_svg","e","undefined","n","t","constructor","this","c","html","h","m","createElementNS","nodeType","nodeName","tagName","content","i","innerHTML","Array","from","childNodes","length","p","d","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","tick","add_render_callback","seen_callbacks","Set","flushidx","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","ctx","after_update","outroing","ensure_array_like","array_like_or_iterator","destroy_component","detaching","filtered","targets","indexOf","flush_render_callbacks","on_destroy","init","instance","create_fragment","not_equal","props","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","ready","ret","rest","fill","make_dirty","hydrate","nodes","children","l","intro","block","local","delete","transition_in","new_on_destroy","map","filter","mount_component","SvelteComponent","$$set","$destroy","$on","type","index","splice","$set","obj","keys","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","window","__svelte","v","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","encode","test","replace","caret","edit","regex","opt","val","valSource","getRegex","cleanUrl","encodeURI","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","trim","shift","rtrim","invert","suffLen","currChar","charAt","slice","outputLink","cap","link","raw","lexer","title","state","inLink","token","tokens","inlineTokens","_Tokenizer","rules","src","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","list","bull","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","repeat","nextLine","blankLine","indent","trimStart","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","trimEnd","spacers","hasMultipleLineBreaks","some","pre","def","tag","toLowerCase","table","headers","aligns","rows","item","header","align","row","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","level","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","inlineNormal","blockSkip","reflinkSearch","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","lex","lexInline","next","lastParagraphClipped","cutSrc","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","getStartIndex","errMsg","charCodeAt","console","error","keepPrevChar","includes","lastIndexOf","startInline","_Renderer","parser","langString","parse","parseInline","body","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","textToken","_Hooks","static","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","markedInstance","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","arg","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","message","msg","reject","marked","create_if_block_6","create_if_block_7","button","img","img_src_value","create_if_block_2","create_if_block_1","div3","div0","span","button0","div1","div2","button1","iterations","t_value","ctaText","raw_value","productCarousel","html_tag","if_block0","create_if_block_4","if_block1","create_if_block_3","div","div_class_value","sender","create_if_block_5","create_if_block","primaryColor","buttonColor","buttonTextColor","backgroundColor","textColor","loaderColor","loaderBackground","generateUUID","r","random","generateColorScheme","brandColor","lighterBackground","parseInt","isColorLight","color","g","brightness","newR","newG","newB","max","contrastRatio","r1","g1","b1","r2","g2","b2","l1","l2","getContrastRatio","padStart","generateContrastingColor","chatMessages","$$props","apiUrl","initialMessage","buttonIcon","position","openInNewTab","enableUTM","persistentSession","sessionExpiration","isChatVisible","messages","userInput","isLoading","isLoadingHistory","sessionId","localStorage","getItem","db","addMessageToUI","rawText","ctaTextToUse","jsonResponse","JSON","response","products","product","immagine","nome","prezzo","addUtmParams","$$invalidate","scrollTop","scrollHeight","medium","campaign","urlObj","URL","location","origin","searchParams","set","sendMessage","addMessage","params","URLSearchParams","action","chatInput","fetch","method","json","loadChatHistory","lastSessionTime","currentTime","Date","now","removeItem","transaction","request","objectStore","onsuccess","log","onerror","clearChatHistory","setItem","storedMessages","getAll","result","getChatHistory","timestamp","saveMessage","indexedDB","open","onupgradeneeded","createObjectStore","keyPath","createIndex","unique","colorScheme","isImageUrl","isSvg","startsWith","$$value","getDefaults","targetDiv","currentScript","getAttr","defaultValue","getPosition"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}