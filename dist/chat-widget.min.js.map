{"version":3,"file":"chat-widget.min.js","sources":["../node_modules/marked/lib/marked.esm.js","../node_modules/svelte/src/runtime/internal/utils.js","../node_modules/svelte/src/runtime/internal/lifecycle.js","../node_modules/svelte/src/runtime/internal/dom.js","../node_modules/svelte/src/runtime/internal/scheduler.js","../node_modules/svelte/src/runtime/internal/transitions.js","../node_modules/svelte/src/runtime/internal/each.js","../node_modules/svelte/src/runtime/internal/Component.js","../AIChatWidget.svelte","../node_modules/svelte/src/runtime/internal/disclose-version/index.js","../node_modules/svelte/src/shared/version.js","../embed.js"],"sourcesContent":["/**\n * marked v14.1.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text),\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^(?: {1,4}| {0,3}\\t)/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^[ \\t]*$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    const htmlBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}<[a-z].*>`, 'i');\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(/\\t/g, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(/\\t/g, '    ').search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n[ \\t]*\\n[ \\t]*$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1]),\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(langString)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","/** @returns {void} */\nexport function noop() {}\n\nexport const identity = (x) => x;\n\n/**\n * @template T\n * @template S\n * @param {T} tar\n * @param {S} src\n * @returns {T & S}\n */\nexport function assign(tar, src) {\n\t// @ts-ignore\n\tfor (const k in src) tar[k] = src[k];\n\treturn /** @type {T & S} */ (tar);\n}\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n/**\n * @param {any} value\n * @returns {value is PromiseLike<any>}\n */\nexport function is_promise(value) {\n\treturn (\n\t\t!!value &&\n\t\t(typeof value === 'object' || typeof value === 'function') &&\n\t\ttypeof (/** @type {any} */ (value).then) === 'function'\n\t);\n}\n\n/** @returns {void} */\nexport function add_location(element, file, line, column, char) {\n\telement.__svelte_meta = {\n\t\tloc: { file, line, column, char }\n\t};\n}\n\nexport function run(fn) {\n\treturn fn();\n}\n\nexport function blank_object() {\n\treturn Object.create(null);\n}\n\n/**\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function run_all(fns) {\n\tfns.forEach(run);\n}\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\n/** @returns {boolean} */\nexport function safe_not_equal(a, b) {\n\treturn a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';\n}\n\nlet src_url_equal_anchor;\n\n/**\n * @param {string} element_src\n * @param {string} url\n * @returns {boolean}\n */\nexport function src_url_equal(element_src, url) {\n\tif (element_src === url) return true;\n\tif (!src_url_equal_anchor) {\n\t\tsrc_url_equal_anchor = document.createElement('a');\n\t}\n\t// This is actually faster than doing URL(..).href\n\tsrc_url_equal_anchor.href = url;\n\treturn element_src === src_url_equal_anchor.href;\n}\n\n/** @param {string} srcset */\nfunction split_srcset(srcset) {\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\n}\n\n/**\n * @param {HTMLSourceElement | HTMLImageElement} element_srcset\n * @param {string | undefined | null} srcset\n * @returns {boolean}\n */\nexport function srcset_url_equal(element_srcset, srcset) {\n\tconst element_urls = split_srcset(element_srcset.srcset);\n\tconst urls = split_srcset(srcset || '');\n\n\treturn (\n\t\turls.length === element_urls.length &&\n\t\turls.every(\n\t\t\t([url, width], i) =>\n\t\t\t\twidth === element_urls[i][1] &&\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\n\t\t\t\t// contain relative or absolute URLs.\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\n\t\t)\n\t);\n}\n\n/** @returns {boolean} */\nexport function not_equal(a, b) {\n\treturn a != a ? b == b : a !== b;\n}\n\n/** @returns {boolean} */\nexport function is_empty(obj) {\n\treturn Object.keys(obj).length === 0;\n}\n\n/** @returns {void} */\nexport function validate_store(store, name) {\n\tif (store != null && typeof store.subscribe !== 'function') {\n\t\tthrow new Error(`'${name}' is not a store with a 'subscribe' method`);\n\t}\n}\n\nexport function subscribe(store, ...callbacks) {\n\tif (store == null) {\n\t\tfor (const callback of callbacks) {\n\t\t\tcallback(undefined);\n\t\t}\n\t\treturn noop;\n\t}\n\tconst unsub = store.subscribe(...callbacks);\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\n\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n *\n * https://svelte.dev/docs/svelte-store#get\n * @template T\n * @param {import('../store/public.js').Readable<T>} store\n * @returns {T}\n */\nexport function get_store_value(store) {\n\tlet value;\n\tsubscribe(store, (_) => (value = _))();\n\treturn value;\n}\n\n/** @returns {void} */\nexport function component_subscribe(component, store, callback) {\n\tcomponent.$$.on_destroy.push(subscribe(store, callback));\n}\n\nexport function create_slot(definition, ctx, $$scope, fn) {\n\tif (definition) {\n\t\tconst slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n\t\treturn definition[0](slot_ctx);\n\t}\n}\n\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n\treturn definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;\n}\n\nexport function get_slot_changes(definition, $$scope, dirty, fn) {\n\tif (definition[2] && fn) {\n\t\tconst lets = definition[2](fn(dirty));\n\t\tif ($$scope.dirty === undefined) {\n\t\t\treturn lets;\n\t\t}\n\t\tif (typeof lets === 'object') {\n\t\t\tconst merged = [];\n\t\t\tconst len = Math.max($$scope.dirty.length, lets.length);\n\t\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\t\tmerged[i] = $$scope.dirty[i] | lets[i];\n\t\t\t}\n\t\t\treturn merged;\n\t\t}\n\t\treturn $$scope.dirty | lets;\n\t}\n\treturn $$scope.dirty;\n}\n\n/** @returns {void} */\nexport function update_slot_base(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tslot_changes,\n\tget_slot_context_fn\n) {\n\tif (slot_changes) {\n\t\tconst slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n\t\tslot.p(slot_context, slot_changes);\n\t}\n}\n\n/** @returns {void} */\nexport function update_slot(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tdirty,\n\tget_slot_changes_fn,\n\tget_slot_context_fn\n) {\n\tconst slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n\tupdate_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\n\n/** @returns {any[] | -1} */\nexport function get_all_dirty_from_scope($$scope) {\n\tif ($$scope.ctx.length > 32) {\n\t\tconst dirty = [];\n\t\tconst length = $$scope.ctx.length / 32;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tdirty[i] = -1;\n\t\t}\n\t\treturn dirty;\n\t}\n\treturn -1;\n}\n\n/** @returns {{}} */\nexport function exclude_internal_props(props) {\n\tconst result = {};\n\tfor (const k in props) if (k[0] !== '$') result[k] = props[k];\n\treturn result;\n}\n\n/** @returns {{}} */\nexport function compute_rest_props(props, keys) {\n\tconst rest = {};\n\tkeys = new Set(keys);\n\tfor (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];\n\treturn rest;\n}\n\n/** @returns {{}} */\nexport function compute_slots(slots) {\n\tconst result = {};\n\tfor (const key in slots) {\n\t\tresult[key] = true;\n\t}\n\treturn result;\n}\n\n/** @returns {(this: any, ...args: any[]) => void} */\nexport function once(fn) {\n\tlet ran = false;\n\treturn function (...args) {\n\t\tif (ran) return;\n\t\tran = true;\n\t\tfn.call(this, ...args);\n\t};\n}\n\nexport function null_to_empty(value) {\n\treturn value == null ? '' : value;\n}\n\nexport function set_store_value(store, ret, value) {\n\tstore.set(value);\n\treturn ret;\n}\n\nexport const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\nexport function action_destroyer(action_result) {\n\treturn action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\n/** @param {number | string} value\n * @returns {[number, string]}\n */\nexport function split_css_unit(value) {\n\tconst split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n\treturn split ? [parseFloat(split[1]), split[2] || 'px'] : [/** @type {number} */ (value), 'px'];\n}\n\nexport const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n","import { custom_event } from './dom.js';\n\nexport let current_component;\n\n/** @returns {void} */\nexport function set_current_component(component) {\n\tcurrent_component = component;\n}\n\nexport function get_current_component() {\n\tif (!current_component) throw new Error('Function called outside component initialization');\n\treturn current_component;\n}\n\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#beforeupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function beforeUpdate(fn) {\n\tget_current_component().$$.before_update.push(fn);\n}\n\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\n *\n * `onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs/svelte#onmount\n * @template T\n * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn\n * @returns {void}\n */\nexport function onMount(fn) {\n\tget_current_component().$$.on_mount.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#afterupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function afterUpdate(fn) {\n\tget_current_component().$$.after_update.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs/svelte#ondestroy\n * @param {() => any} fn\n * @returns {void}\n */\nexport function onDestroy(fn) {\n\tget_current_component().$$.on_destroy.push(fn);\n}\n\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n * ```ts\n * const dispatch = createEventDispatcher<{\n *  loaded: never; // does not take a detail argument\n *  change: string; // takes a detail argument of type string, which is required\n *  optional: number | null; // takes an optional detail argument of type number\n * }>();\n * ```\n *\n * https://svelte.dev/docs/svelte#createeventdispatcher\n * @template {Record<string, any>} [EventMap=any]\n * @returns {import('./public.js').EventDispatcher<EventMap>}\n */\nexport function createEventDispatcher() {\n\tconst component = get_current_component();\n\treturn (type, detail, { cancelable = false } = {}) => {\n\t\tconst callbacks = component.$$.callbacks[type];\n\t\tif (callbacks) {\n\t\t\t// TODO are there situations where events could be dispatched\n\t\t\t// in a server (non-DOM) environment?\n\t\t\tconst event = custom_event(/** @type {string} */ (type), detail, { cancelable });\n\t\t\tcallbacks.slice().forEach((fn) => {\n\t\t\t\tfn.call(component, event);\n\t\t\t});\n\t\t\treturn !event.defaultPrevented;\n\t\t}\n\t\treturn true;\n\t};\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#setcontext\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tget_current_component().$$.context.set(key, context);\n\treturn context;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#getcontext\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\treturn get_current_component().$$.context.get(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs/svelte#getallcontexts\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\treturn get_current_component().$$.context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#hascontext\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\treturn get_current_component().$$.context.has(key);\n}\n\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\n/**\n * @param component\n * @param event\n * @returns {void}\n */\nexport function bubble(component, event) {\n\tconst callbacks = component.$$.callbacks[event.type];\n\tif (callbacks) {\n\t\t// @ts-ignore\n\t\tcallbacks.slice().forEach((fn) => fn.call(this, event));\n\t}\n}\n","import { contenteditable_truthy_values, has_prop } from './utils.js';\n\nimport { ResizeObserverSingleton } from './ResizeObserverSingleton.js';\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\n\n/**\n * @returns {void}\n */\nexport function start_hydrating() {\n\tis_hydrating = true;\n}\n\n/**\n * @returns {void}\n */\nexport function end_hydrating() {\n\tis_hydrating = false;\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {(index: number) => number} key\n * @param {number} value\n * @returns {number}\n */\nfunction upper_bound(low, high, key, value) {\n\t// Return first index of value larger than input value in the range [low, high)\n\twhile (low < high) {\n\t\tconst mid = low + ((high - low) >> 1);\n\t\tif (key(mid) <= value) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\n\n/**\n * @param {NodeEx} target\n * @returns {void}\n */\nfunction init_hydrate(target) {\n\tif (target.hydrate_init) return;\n\ttarget.hydrate_init = true;\n\t// We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n\n\tlet children = /** @type {ArrayLike<NodeEx2>} */ (target.childNodes);\n\t// If target is <head>, there may be children without claim_order\n\tif (target.nodeName === 'HEAD') {\n\t\tconst my_children = [];\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\tconst node = children[i];\n\t\t\tif (node.claim_order !== undefined) {\n\t\t\t\tmy_children.push(node);\n\t\t\t}\n\t\t}\n\t\tchildren = my_children;\n\t}\n\t/*\n\t * Reorder claimed children optimally.\n\t * We can reorder claimed children optimally by finding the longest subsequence of\n\t * nodes that are already claimed in order and only moving the rest. The longest\n\t * subsequence of nodes that are claimed in order can be found by\n\t * computing the longest increasing subsequence of .claim_order values.\n\t *\n\t * This algorithm is optimal in generating the least amount of reorder operations\n\t * possible.\n\t *\n\t * Proof:\n\t * We know that, given a set of reordering operations, the nodes that do not move\n\t * always form an increasing subsequence, since they do not move among each other\n\t * meaning that they must be already ordered among each other. Thus, the maximal\n\t * set of nodes that do not move form a longest increasing subsequence.\n\t */\n\t// Compute longest increasing subsequence\n\t// m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n\tconst m = new Int32Array(children.length + 1);\n\t// Predecessor indices + 1\n\tconst p = new Int32Array(children.length);\n\tm[0] = -1;\n\tlet longest = 0;\n\tfor (let i = 0; i < children.length; i++) {\n\t\tconst current = children[i].claim_order;\n\t\t// Find the largest subsequence length such that it ends in a value less than our current value\n\t\t// upper_bound returns first greater value, so we subtract one\n\t\t// with fast path for when we are on the current longest subsequence\n\t\tconst seq_len =\n\t\t\t(longest > 0 && children[m[longest]].claim_order <= current\n\t\t\t\t? longest + 1\n\t\t\t\t: upper_bound(1, longest, (idx) => children[m[idx]].claim_order, current)) - 1;\n\t\tp[i] = m[seq_len] + 1;\n\t\tconst new_len = seq_len + 1;\n\t\t// We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n\t\tm[new_len] = i;\n\t\tlongest = Math.max(new_len, longest);\n\t}\n\t// The longest increasing subsequence of nodes (initially reversed)\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst lis = [];\n\t// The rest of the nodes, nodes that will be moved\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst to_move = [];\n\tlet last = children.length - 1;\n\tfor (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n\t\tlis.push(children[cur - 1]);\n\t\tfor (; last >= cur; last--) {\n\t\t\tto_move.push(children[last]);\n\t\t}\n\t\tlast--;\n\t}\n\tfor (; last >= 0; last--) {\n\t\tto_move.push(children[last]);\n\t}\n\tlis.reverse();\n\t// We sort the nodes being moved to guarantee that their insertion order matches the claim order\n\tto_move.sort((a, b) => a.claim_order - b.claim_order);\n\t// Finally, we move the nodes\n\tfor (let i = 0, j = 0; i < to_move.length; i++) {\n\t\twhile (j < lis.length && to_move[i].claim_order >= lis[j].claim_order) {\n\t\t\tj++;\n\t\t}\n\t\tconst anchor = j < lis.length ? lis[j] : null;\n\t\ttarget.insertBefore(to_move[i], anchor);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append(target, node) {\n\ttarget.appendChild(node);\n}\n\n/**\n * @param {Node} target\n * @param {string} style_sheet_id\n * @param {string} styles\n * @returns {void}\n */\nexport function append_styles(target, style_sheet_id, styles) {\n\tconst append_styles_to = get_root_for_style(target);\n\tif (!append_styles_to.getElementById(style_sheet_id)) {\n\t\tconst style = element('style');\n\t\tstyle.id = style_sheet_id;\n\t\tstyle.textContent = styles;\n\t\tappend_stylesheet(append_styles_to, style);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {ShadowRoot | Document}\n */\nexport function get_root_for_style(node) {\n\tif (!node) return document;\n\tconst root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n\tif (root && /** @type {ShadowRoot} */ (root).host) {\n\t\treturn /** @type {ShadowRoot} */ (root);\n\t}\n\treturn node.ownerDocument;\n}\n\n/**\n * @param {Node} node\n * @returns {CSSStyleSheet}\n */\nexport function append_empty_stylesheet(node) {\n\tconst style_element = element('style');\n\t// For transitions to work without 'style-src: unsafe-inline' Content Security Policy,\n\t// these empty tags need to be allowed with a hash as a workaround until we move to the Web Animations API.\n\t// Using the hash for the empty string (for an empty tag) works in all browsers except Safari.\n\t// So as a workaround for the workaround, when we append empty style tags we set their content to /* empty */.\n\t// The hash 'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=' will then work even in Safari.\n\tstyle_element.textContent = '/* empty */';\n\tappend_stylesheet(get_root_for_style(node), style_element);\n\treturn style_element.sheet;\n}\n\n/**\n * @param {ShadowRoot | Document} node\n * @param {HTMLStyleElement} style\n * @returns {CSSStyleSheet}\n */\nfunction append_stylesheet(node, style) {\n\tappend(/** @type {Document} */ (node).head || node, style);\n\treturn style.sheet;\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @returns {void}\n */\nexport function append_hydration(target, node) {\n\tif (is_hydrating) {\n\t\tinit_hydrate(target);\n\t\tif (\n\t\t\ttarget.actual_end_child === undefined ||\n\t\t\t(target.actual_end_child !== null && target.actual_end_child.parentNode !== target)\n\t\t) {\n\t\t\ttarget.actual_end_child = target.firstChild;\n\t\t}\n\t\t// Skip nodes of undefined ordering\n\t\twhile (target.actual_end_child !== null && target.actual_end_child.claim_order === undefined) {\n\t\t\ttarget.actual_end_child = target.actual_end_child.nextSibling;\n\t\t}\n\t\tif (node !== target.actual_end_child) {\n\t\t\t// We only insert if the ordering of this node should be modified or the parent node is not target\n\t\t\tif (node.claim_order !== undefined || node.parentNode !== target) {\n\t\t\t\ttarget.insertBefore(node, target.actual_end_child);\n\t\t\t}\n\t\t} else {\n\t\t\ttarget.actual_end_child = node.nextSibling;\n\t\t}\n\t} else if (node.parentNode !== target || node.nextSibling !== null) {\n\t\ttarget.appendChild(node);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert(target, node, anchor) {\n\ttarget.insertBefore(node, anchor || null);\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @param {NodeEx} [anchor]\n * @returns {void}\n */\nexport function insert_hydration(target, node, anchor) {\n\tif (is_hydrating && !anchor) {\n\t\tappend_hydration(target, node);\n\t} else if (node.parentNode !== target || node.nextSibling != anchor) {\n\t\ttarget.insertBefore(node, anchor || null);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {void}\n */\nexport function detach(node) {\n\tif (node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function destroy_each(iterations, detaching) {\n\tfor (let i = 0; i < iterations.length; i += 1) {\n\t\tif (iterations[i]) iterations[i].d(detaching);\n\t}\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element(name) {\n\treturn document.createElement(name);\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @param {string} is\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element_is(name, is) {\n\treturn document.createElement(name, { is });\n}\n\n/**\n * @template T\n * @template {keyof T} K\n * @param {T} obj\n * @param {K[]} exclude\n * @returns {Pick<T, Exclude<keyof T, K>>}\n */\nexport function object_without_properties(obj, exclude) {\n\tconst target = /** @type {Pick<T, Exclude<keyof T, K>>} */ ({});\n\tfor (const k in obj) {\n\t\tif (\n\t\t\thas_prop(obj, k) &&\n\t\t\t// @ts-ignore\n\t\t\texclude.indexOf(k) === -1\n\t\t) {\n\t\t\t// @ts-ignore\n\t\t\ttarget[k] = obj[k];\n\t\t}\n\t}\n\treturn target;\n}\n\n/**\n * @template {keyof SVGElementTagNameMap} K\n * @param {K} name\n * @returns {SVGElement}\n */\nexport function svg_element(name) {\n\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\n}\n\n/**\n * @param {string} data\n * @returns {Text}\n */\nexport function text(data) {\n\treturn document.createTextNode(data);\n}\n\n/**\n * @returns {Text} */\nexport function space() {\n\treturn text(' ');\n}\n\n/**\n * @returns {Text} */\nexport function empty() {\n\treturn text('');\n}\n\n/**\n * @param {string} content\n * @returns {Comment}\n */\nexport function comment(content) {\n\treturn document.createComment(content);\n}\n\n/**\n * @param {EventTarget} node\n * @param {string} event\n * @param {EventListenerOrEventListenerObject} handler\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\n * @returns {() => void}\n */\nexport function listen(node, event, handler, options) {\n\tnode.addEventListener(event, handler, options);\n\treturn () => node.removeEventListener(event, handler, options);\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function prevent_default(fn) {\n\treturn function (event) {\n\t\tevent.preventDefault();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopPropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_immediate_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopImmediatePropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function self(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.target === this) fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function trusted(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.isTrusted) fn.call(this, event);\n\t};\n}\n\n/**\n * @param {Element} node\n * @param {string} attribute\n * @param {string} [value]\n * @returns {void}\n */\nexport function attr(node, attribute, value) {\n\tif (value == null) node.removeAttribute(attribute);\n\telse if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_attributes(node, attributes) {\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n\tfor (const key in attributes) {\n\t\tif (attributes[key] == null) {\n\t\t\tnode.removeAttribute(key);\n\t\t} else if (key === 'style') {\n\t\t\tnode.style.cssText = attributes[key];\n\t\t} else if (key === '__value') {\n\t\t\t/** @type {any} */ (node).value = node[key] = attributes[key];\n\t\t} else if (\n\t\t\tdescriptors[key] &&\n\t\t\tdescriptors[key].set &&\n\t\t\talways_set_through_set_attribute.indexOf(key) === -1\n\t\t) {\n\t\t\tnode[key] = attributes[key];\n\t\t} else {\n\t\t\tattr(node, key, attributes[key]);\n\t\t}\n\t}\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_svg_attributes(node, attributes) {\n\tfor (const key in attributes) {\n\t\tattr(node, key, attributes[key]);\n\t}\n}\n\n/**\n * @param {Record<string, unknown>} data_map\n * @returns {void}\n */\nexport function set_custom_element_data_map(node, data_map) {\n\tObject.keys(data_map).forEach((key) => {\n\t\tset_custom_element_data(node, key, data_map[key]);\n\t});\n}\n\n/**\n * @returns {void} */\nexport function set_custom_element_data(node, prop, value) {\n\tconst lower = prop.toLowerCase(); // for backwards compatibility with existing behavior we do lowercase first\n\tif (lower in node) {\n\t\tnode[lower] = typeof node[lower] === 'boolean' && value === '' ? true : value;\n\t} else if (prop in node) {\n\t\tnode[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n\t} else {\n\t\tattr(node, prop, value);\n\t}\n}\n\n/**\n * @param {string} tag\n */\nexport function set_dynamic_element_data(tag) {\n\treturn /-/.test(tag) ? set_custom_element_data_map : set_attributes;\n}\n\n/**\n * @returns {void}\n */\nexport function xlink_attr(node, attribute, value) {\n\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\n\n/**\n * @param {HTMLElement} node\n * @returns {string}\n */\nexport function get_svelte_dataset(node) {\n\treturn node.dataset.svelteH;\n}\n\n/**\n * @returns {unknown[]} */\nexport function get_binding_group_value(group, __value, checked) {\n\tconst value = new Set();\n\tfor (let i = 0; i < group.length; i += 1) {\n\t\tif (group[i].checked) value.add(group[i].__value);\n\t}\n\tif (!checked) {\n\t\tvalue.delete(__value);\n\t}\n\treturn Array.from(value);\n}\n\n/**\n * @param {HTMLInputElement[]} group\n * @returns {{ p(...inputs: HTMLInputElement[]): void; r(): void; }}\n */\nexport function init_binding_group(group) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\treturn {\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\t_inputs.forEach((input) => group.push(input));\n\t\t},\n\t\t/* remove */ r() {\n\t\t\t_inputs.forEach((input) => group.splice(group.indexOf(input), 1));\n\t\t}\n\t};\n}\n\n/**\n * @param {number[]} indexes\n * @returns {{ u(new_indexes: number[]): void; p(...inputs: HTMLInputElement[]): void; r: () => void; }}\n */\nexport function init_binding_group_dynamic(group, indexes) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _group = get_binding_group(group);\n\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\n\tfunction get_binding_group(group) {\n\t\tfor (let i = 0; i < indexes.length; i++) {\n\t\t\tgroup = group[indexes[i]] = group[indexes[i]] || [];\n\t\t}\n\t\treturn group;\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction push() {\n\t\t_inputs.forEach((input) => _group.push(input));\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction remove() {\n\t\t_inputs.forEach((input) => _group.splice(_group.indexOf(input), 1));\n\t}\n\treturn {\n\t\t/* update */ u(new_indexes) {\n\t\t\tindexes = new_indexes;\n\t\t\tconst new_group = get_binding_group(group);\n\t\t\tif (new_group !== _group) {\n\t\t\t\tremove();\n\t\t\t\t_group = new_group;\n\t\t\t\tpush();\n\t\t\t}\n\t\t},\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\tpush();\n\t\t},\n\t\t/* remove */ r: remove\n\t};\n}\n\n/** @returns {number} */\nexport function to_number(value) {\n\treturn value === '' ? null : +value;\n}\n\n/** @returns {any[]} */\nexport function time_ranges_to_array(ranges) {\n\tconst array = [];\n\tfor (let i = 0; i < ranges.length; i += 1) {\n\t\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\n\t}\n\treturn array;\n}\n\n/**\n * @param {Element} element\n * @returns {ChildNode[]}\n */\nexport function children(element) {\n\treturn Array.from(element.childNodes);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {void}\n */\nfunction init_claim_info(nodes) {\n\tif (nodes.claim_info === undefined) {\n\t\tnodes.claim_info = { last_index: 0, total_claimed: 0 };\n\t}\n}\n\n/**\n * @template {ChildNodeEx} R\n * @param {ChildNodeArray} nodes\n * @param {(node: ChildNodeEx) => node is R} predicate\n * @param {(node: ChildNodeEx) => ChildNodeEx | undefined} process_node\n * @param {() => R} create_node\n * @param {boolean} dont_update_last_index\n * @returns {R}\n */\nfunction claim_node(nodes, predicate, process_node, create_node, dont_update_last_index = false) {\n\t// Try to find nodes in an order such that we lengthen the longest increasing subsequence\n\tinit_claim_info(nodes);\n\tconst result_node = (() => {\n\t\t// We first try to find an element after the previous one\n\t\tfor (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// Otherwise, we try to find one before\n\t\t// We iterate in reverse so that we don't go too far back\n\t\tfor (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t} else if (replacement === undefined) {\n\t\t\t\t\t// Since we spliced before the last_index, we decrease it\n\t\t\t\t\tnodes.claim_info.last_index--;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// If we can't find any matching node, we create a new one\n\t\treturn create_node();\n\t})();\n\tresult_node.claim_order = nodes.claim_info.total_claimed;\n\tnodes.claim_info.total_claimed += 1;\n\treturn result_node;\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @param {(name: string) => Element | SVGElement} create_element\n * @returns {Element | SVGElement}\n */\nfunction claim_element_base(nodes, name, attributes, create_element) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Element | SVGElement} */\n\t\t(node) => node.nodeName === name,\n\t\t/** @param {Element} node */\n\t\t(node) => {\n\t\t\tconst remove = [];\n\t\t\tfor (let j = 0; j < node.attributes.length; j++) {\n\t\t\t\tconst attribute = node.attributes[j];\n\t\t\t\tif (!attributes[attribute.name]) {\n\t\t\t\t\tremove.push(attribute.name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tremove.forEach((v) => node.removeAttribute(v));\n\t\t\treturn undefined;\n\t\t},\n\t\t() => create_element(name)\n\t);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_svg_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, svg_element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Text}\n */\nexport function claim_text(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Text} */\n\t\t(node) => node.nodeType === 3,\n\t\t/** @param {Text} node */\n\t\t(node) => {\n\t\t\tconst data_str = '' + data;\n\t\t\tif (node.data.startsWith(data_str)) {\n\t\t\t\tif (node.data.length !== data_str.length) {\n\t\t\t\t\treturn node.splitText(data_str.length);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode.data = data_str;\n\t\t\t}\n\t\t},\n\t\t() => text(data),\n\t\ttrue // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n\t);\n}\n\n/**\n * @returns {Text} */\nexport function claim_space(nodes) {\n\treturn claim_text(nodes, ' ');\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Comment}\n */\nexport function claim_comment(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Comment} */\n\t\t(node) => node.nodeType === 8,\n\t\t/** @param {Comment} node */\n\t\t(node) => {\n\t\t\tnode.data = '' + data;\n\t\t\treturn undefined;\n\t\t},\n\t\t() => comment(data),\n\t\ttrue\n\t);\n}\n\nfunction get_comment_idx(nodes, text, start) {\n\tfor (let i = start; i < nodes.length; i += 1) {\n\t\tconst node = nodes[i];\n\t\tif (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * @param {boolean} is_svg\n * @returns {HtmlTagHydration}\n */\nexport function claim_html_tag(nodes, is_svg) {\n\t// find html opening tag\n\tconst start_index = get_comment_idx(nodes, 'HTML_TAG_START', 0);\n\tconst end_index = get_comment_idx(nodes, 'HTML_TAG_END', start_index + 1);\n\tif (start_index === -1 || end_index === -1) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\n\tinit_claim_info(nodes);\n\tconst html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n\tdetach(html_tag_nodes[0]);\n\tdetach(html_tag_nodes[html_tag_nodes.length - 1]);\n\tconst claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n\tif (claimed_nodes.length === 0) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\tfor (const n of claimed_nodes) {\n\t\tn.claim_order = nodes.claim_info.total_claimed;\n\t\tnodes.claim_info.total_claimed += 1;\n\t}\n\treturn new HtmlTagHydration(is_svg, claimed_nodes);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data(text, data) {\n\tdata = '' + data;\n\tif (text.data === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_contenteditable(text, data) {\n\tdata = '' + data;\n\tif (text.wholeText === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @param {string} attr_value\n * @returns {void}\n */\nexport function set_data_maybe_contenteditable(text, data, attr_value) {\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\n\t\tset_data_contenteditable(text, data);\n\t} else {\n\t\tset_data(text, data);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_input_value(input, value) {\n\tinput.value = value == null ? '' : value;\n}\n\n/**\n * @returns {void} */\nexport function set_input_type(input, type) {\n\ttry {\n\t\tinput.type = type;\n\t} catch (e) {\n\t\t// do nothing\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_style(node, key, value, important) {\n\tif (value == null) {\n\t\tnode.style.removeProperty(key);\n\t} else {\n\t\tnode.style.setProperty(key, value, important ? 'important' : '');\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_option(select, value, mounting) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\tif (option.__value === value) {\n\t\t\toption.selected = true;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (!mounting || value !== undefined) {\n\t\tselect.selectedIndex = -1; // no option should be selected\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_options(select, value) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\toption.selected = ~value.indexOf(option.__value);\n\t}\n}\n\nexport function select_value(select) {\n\tconst selected_option = select.querySelector(':checked');\n\treturn selected_option && selected_option.__value;\n}\n\nexport function select_multiple_value(select) {\n\treturn [].map.call(select.querySelectorAll(':checked'), (option) => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\n\n/**\n * @type {boolean} */\nlet crossorigin;\n\n/**\n * @returns {boolean} */\nexport function is_crossorigin() {\n\tif (crossorigin === undefined) {\n\t\tcrossorigin = false;\n\t\ttry {\n\t\t\tif (typeof window !== 'undefined' && window.parent) {\n\t\t\t\tvoid window.parent.document;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tcrossorigin = true;\n\t\t}\n\t}\n\treturn crossorigin;\n}\n\n/**\n * @param {HTMLElement} node\n * @param {() => void} fn\n * @returns {() => void}\n */\nexport function add_iframe_resize_listener(node, fn) {\n\tconst computed_style = getComputedStyle(node);\n\tif (computed_style.position === 'static') {\n\t\tnode.style.position = 'relative';\n\t}\n\tconst iframe = element('iframe');\n\tiframe.setAttribute(\n\t\t'style',\n\t\t'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n\t\t\t'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;'\n\t);\n\tiframe.setAttribute('aria-hidden', 'true');\n\tiframe.tabIndex = -1;\n\tconst crossorigin = is_crossorigin();\n\n\t/**\n\t * @type {() => void}\n\t */\n\tlet unsubscribe;\n\tif (crossorigin) {\n\t\tiframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n\t\tunsubscribe = listen(\n\t\t\twindow,\n\t\t\t'message',\n\t\t\t/** @param {MessageEvent} event */ (event) => {\n\t\t\t\tif (event.source === iframe.contentWindow) fn();\n\t\t\t}\n\t\t);\n\t} else {\n\t\tiframe.src = 'about:blank';\n\t\tiframe.onload = () => {\n\t\t\tunsubscribe = listen(iframe.contentWindow, 'resize', fn);\n\t\t\t// make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n\t\t\t// see https://github.com/sveltejs/svelte/issues/4233\n\t\t\tfn();\n\t\t};\n\t}\n\tappend(node, iframe);\n\treturn () => {\n\t\tif (crossorigin) {\n\t\t\tunsubscribe();\n\t\t} else if (unsubscribe && iframe.contentWindow) {\n\t\t\tunsubscribe();\n\t\t}\n\t\tdetach(iframe);\n\t};\n}\nexport const resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'content-box'\n});\nexport const resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'border-box'\n});\nexport const resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton(\n\t{ box: 'device-pixel-content-box' }\n);\nexport { ResizeObserverSingleton };\n\n/**\n * @returns {void} */\nexport function toggle_class(element, name, toggle) {\n\t// The `!!` is required because an `undefined` flag means flipping the current state.\n\telement.classList.toggle(name, !!toggle);\n}\n\n/**\n * @template T\n * @param {string} type\n * @param {T} [detail]\n * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]\n * @returns {CustomEvent<T>}\n */\nexport function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\n}\n\n/**\n * @param {string} selector\n * @param {HTMLElement} parent\n * @returns {ChildNodeArray}\n */\nexport function query_selector_all(selector, parent = document.body) {\n\treturn Array.from(parent.querySelectorAll(selector));\n}\n\n/**\n * @param {string} nodeId\n * @param {HTMLElement} head\n * @returns {any[]}\n */\nexport function head_selector(nodeId, head) {\n\tconst result = [];\n\tlet started = 0;\n\tfor (const node of head.childNodes) {\n\t\tif (node.nodeType === 8 /* comment node */) {\n\t\t\tconst comment = node.textContent.trim();\n\t\t\tif (comment === `HEAD_${nodeId}_END`) {\n\t\t\t\tstarted -= 1;\n\t\t\t\tresult.push(node);\n\t\t\t} else if (comment === `HEAD_${nodeId}_START`) {\n\t\t\t\tstarted += 1;\n\t\t\t\tresult.push(node);\n\t\t\t}\n\t\t} else if (started > 0) {\n\t\t\tresult.push(node);\n\t\t}\n\t}\n\treturn result;\n}\n/** */\nexport class HtmlTag {\n\t/**\n\t * @private\n\t * @default false\n\t */\n\tis_svg = false;\n\t/** parent for creating node */\n\te = undefined;\n\t/** html tag nodes */\n\tn = undefined;\n\t/** target */\n\tt = undefined;\n\t/** anchor */\n\ta = undefined;\n\tconstructor(is_svg = false) {\n\t\tthis.is_svg = is_svg;\n\t\tthis.e = this.n = null;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tthis.h(html);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @param {HTMLElement | SVGElement} target\n\t * @param {HTMLElement | SVGElement} anchor\n\t * @returns {void}\n\t */\n\tm(html, target, anchor = null) {\n\t\tif (!this.e) {\n\t\t\tif (this.is_svg)\n\t\t\t\tthis.e = svg_element(/** @type {keyof SVGElementTagNameMap} */ (target.nodeName));\n\t\t\t/** #7364  target for <template> may be provided as #document-fragment(11) */ else\n\t\t\t\tthis.e = element(\n\t\t\t\t\t/** @type {keyof HTMLElementTagNameMap} */ (\n\t\t\t\t\t\ttarget.nodeType === 11 ? 'TEMPLATE' : target.nodeName\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tthis.t =\n\t\t\t\ttarget.tagName !== 'TEMPLATE'\n\t\t\t\t\t? target\n\t\t\t\t\t: /** @type {HTMLTemplateElement} */ (target).content;\n\t\t\tthis.c(html);\n\t\t}\n\t\tthis.i(anchor);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\th(html) {\n\t\tthis.e.innerHTML = html;\n\t\tthis.n = Array.from(\n\t\t\tthis.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes\n\t\t);\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert(this.t, this.n[i], anchor);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tp(html) {\n\t\tthis.d();\n\t\tthis.h(html);\n\t\tthis.i(this.a);\n\t}\n\n\t/**\n\t * @returns {void} */\n\td() {\n\t\tthis.n.forEach(detach);\n\t}\n}\n\nexport class HtmlTagHydration extends HtmlTag {\n\t/** @type {Element[]} hydration claimed nodes */\n\tl = undefined;\n\n\tconstructor(is_svg = false, claimed_nodes) {\n\t\tsuper(is_svg);\n\t\tthis.e = this.n = null;\n\t\tthis.l = claimed_nodes;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tif (this.l) {\n\t\t\tthis.n = this.l;\n\t\t} else {\n\t\t\tsuper.c(html);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert_hydration(this.t, this.n[i], anchor);\n\t\t}\n\t}\n}\n\n/**\n * @param {NamedNodeMap} attributes\n * @returns {{}}\n */\nexport function attribute_to_object(attributes) {\n\tconst result = {};\n\tfor (const attribute of attributes) {\n\t\tresult[attribute.name] = attribute.value;\n\t}\n\treturn result;\n}\n\nconst escaped = {\n\t'\"': '&quot;',\n\t'&': '&amp;',\n\t'<': '&lt;'\n};\n\nconst regex_attribute_characters_to_escape = /[\"&<]/g;\n\n/**\n * Note that the attribute itself should be surrounded in double quotes\n * @param {any} attribute\n */\nfunction escape_attribute(attribute) {\n\treturn String(attribute).replace(regex_attribute_characters_to_escape, (match) => escaped[match]);\n}\n\n/**\n * @param {Record<string, string>} attributes\n */\nexport function stringify_spread(attributes) {\n\tlet str = ' ';\n\tfor (const key in attributes) {\n\t\tif (attributes[key] != null) {\n\t\t\tstr += `${key}=\"${escape_attribute(attributes[key])}\" `;\n\t\t}\n\t}\n\n\treturn str;\n}\n\n/**\n * @param {HTMLElement} element\n * @returns {{}}\n */\nexport function get_custom_elements_slots(element) {\n\tconst result = {};\n\telement.childNodes.forEach(\n\t\t/** @param {Element} node */ (node) => {\n\t\t\tresult[node.slot || 'default'] = true;\n\t\t}\n\t);\n\treturn result;\n}\n\nexport function construct_svelte_component(component, props) {\n\treturn new component(props);\n}\n\n/**\n * @typedef {Node & {\n * \tclaim_order?: number;\n * \thydrate_init?: true;\n * \tactual_end_child?: NodeEx;\n * \tchildNodes: NodeListOf<NodeEx>;\n * }} NodeEx\n */\n\n/** @typedef {ChildNode & NodeEx} ChildNodeEx */\n\n/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */\n\n/**\n * @typedef {ChildNodeEx[] & {\n * \tclaim_info?: {\n * \t\tlast_index: number;\n * \t\ttotal_claimed: number;\n * \t};\n * }} ChildNodeArray\n */\n","import { run_all } from './utils.js';\nimport { current_component, set_current_component } from './lifecycle.js';\n\nexport const dirty_components = [];\nexport const intros = { enabled: false };\nexport const binding_callbacks = [];\n\nlet render_callbacks = [];\n\nconst flush_callbacks = [];\n\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\n\nlet update_scheduled = false;\n\n/** @returns {void} */\nexport function schedule_update() {\n\tif (!update_scheduled) {\n\t\tupdate_scheduled = true;\n\t\tresolved_promise.then(flush);\n\t}\n}\n\n/** @returns {Promise<void>} */\nexport function tick() {\n\tschedule_update();\n\treturn resolved_promise;\n}\n\n/** @returns {void} */\nexport function add_render_callback(fn) {\n\trender_callbacks.push(fn);\n}\n\n/** @returns {void} */\nexport function add_flush_callback(fn) {\n\tflush_callbacks.push(fn);\n}\n\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\n\nlet flushidx = 0; // Do *not* move this inside the flush() function\n\n/** @returns {void} */\nexport function flush() {\n\t// Do not reenter flush while dirty components are updated, as this can\n\t// result in an infinite loop. Instead, let the inner flush handle it.\n\t// Reentrancy is ok afterwards for bindings etc.\n\tif (flushidx !== 0) {\n\t\treturn;\n\t}\n\tconst saved_component = current_component;\n\tdo {\n\t\t// first, call beforeUpdate functions\n\t\t// and update components\n\t\ttry {\n\t\t\twhile (flushidx < dirty_components.length) {\n\t\t\t\tconst component = dirty_components[flushidx];\n\t\t\t\tflushidx++;\n\t\t\t\tset_current_component(component);\n\t\t\t\tupdate(component.$$);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// reset dirty state to not end up in a deadlocked state and then rethrow\n\t\t\tdirty_components.length = 0;\n\t\t\tflushidx = 0;\n\t\t\tthrow e;\n\t\t}\n\t\tset_current_component(null);\n\t\tdirty_components.length = 0;\n\t\tflushidx = 0;\n\t\twhile (binding_callbacks.length) binding_callbacks.pop()();\n\t\t// then, once components are updated, call\n\t\t// afterUpdate functions. This may cause\n\t\t// subsequent updates...\n\t\tfor (let i = 0; i < render_callbacks.length; i += 1) {\n\t\t\tconst callback = render_callbacks[i];\n\t\t\tif (!seen_callbacks.has(callback)) {\n\t\t\t\t// ...so guard against infinite loops\n\t\t\t\tseen_callbacks.add(callback);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\trender_callbacks.length = 0;\n\t} while (dirty_components.length);\n\twhile (flush_callbacks.length) {\n\t\tflush_callbacks.pop()();\n\t}\n\tupdate_scheduled = false;\n\tseen_callbacks.clear();\n\tset_current_component(saved_component);\n}\n\n/** @returns {void} */\nfunction update($$) {\n\tif ($$.fragment !== null) {\n\t\t$$.update();\n\t\trun_all($$.before_update);\n\t\tconst dirty = $$.dirty;\n\t\t$$.dirty = [-1];\n\t\t$$.fragment && $$.fragment.p($$.ctx, dirty);\n\t\t$$.after_update.forEach(add_render_callback);\n\t}\n}\n\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function flush_render_callbacks(fns) {\n\tconst filtered = [];\n\tconst targets = [];\n\trender_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));\n\ttargets.forEach((c) => c());\n\trender_callbacks = filtered;\n}\n","import { identity as linear, is_function, noop, run_all } from './utils.js';\nimport { now } from './environment.js';\nimport { loop } from './loop.js';\nimport { create_rule, delete_rule } from './style_manager.js';\nimport { custom_event } from './dom.js';\nimport { add_render_callback } from './scheduler.js';\n\n/**\n * @type {Promise<void> | null}\n */\nlet promise;\n\n/**\n * @returns {Promise<void>}\n */\nfunction wait() {\n\tif (!promise) {\n\t\tpromise = Promise.resolve();\n\t\tpromise.then(() => {\n\t\t\tpromise = null;\n\t\t});\n\t}\n\treturn promise;\n}\n\n/**\n * @param {Element} node\n * @param {INTRO | OUTRO | boolean} direction\n * @param {'start' | 'end'} kind\n * @returns {void}\n */\nfunction dispatch(node, direction, kind) {\n\tnode.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\n\nconst outroing = new Set();\n\n/**\n * @type {Outro}\n */\nlet outros;\n\n/**\n * @returns {void} */\nexport function group_outros() {\n\toutros = {\n\t\tr: 0,\n\t\tc: [],\n\t\tp: outros // parent group\n\t};\n}\n\n/**\n * @returns {void} */\nexport function check_outros() {\n\tif (!outros.r) {\n\t\trun_all(outros.c);\n\t}\n\toutros = outros.p;\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} [local]\n * @returns {void}\n */\nexport function transition_in(block, local) {\n\tif (block && block.i) {\n\t\toutroing.delete(block);\n\t\tblock.i(local);\n\t}\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} local\n * @param {0 | 1} [detach]\n * @param {() => void} [callback]\n * @returns {void}\n */\nexport function transition_out(block, local, detach, callback) {\n\tif (block && block.o) {\n\t\tif (outroing.has(block)) return;\n\t\toutroing.add(block);\n\t\toutros.c.push(() => {\n\t\t\toutroing.delete(block);\n\t\t\tif (callback) {\n\t\t\t\tif (detach) block.d(1);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\tblock.o(local);\n\t} else if (callback) {\n\t\tcallback();\n\t}\n}\n\n/**\n * @type {import('../transition/public.js').TransitionConfig}\n */\nconst null_transition = { duration: 0 };\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ start(): void; invalidate(): void; end(): void; }}\n */\nexport function create_in_transition(node, fn, params) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'in' };\n\tlet config = fn(node, params, options);\n\tlet running = false;\n\tlet animation_name;\n\tlet task;\n\tlet uid = 0;\n\n\t/**\n\t * @returns {void} */\n\tfunction cleanup() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\t\tif (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n\t\ttick(0, 1);\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tif (task) task.abort();\n\t\trunning = true;\n\t\tadd_render_callback(() => dispatch(node, true, 'start'));\n\t\ttask = loop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(1, 0);\n\t\t\t\t\tdispatch(node, true, 'end');\n\t\t\t\t\tcleanup();\n\t\t\t\t\treturn (running = false);\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\tlet started = false;\n\treturn {\n\t\tstart() {\n\t\t\tif (started) return;\n\t\t\tstarted = true;\n\t\t\tdelete_rule(node);\n\t\t\tif (is_function(config)) {\n\t\t\t\tconfig = config(options);\n\t\t\t\twait().then(go);\n\t\t\t} else {\n\t\t\t\tgo();\n\t\t\t}\n\t\t},\n\t\tinvalidate() {\n\t\t\tstarted = false;\n\t\t},\n\t\tend() {\n\t\t\tif (running) {\n\t\t\t\tcleanup();\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ end(reset: any): void; }}\n */\nexport function create_out_transition(node, fn, params) {\n\t/** @type {TransitionOptions} */\n\tconst options = { direction: 'out' };\n\tlet config = fn(node, params, options);\n\tlet running = true;\n\tlet animation_name;\n\tconst group = outros;\n\tgroup.r += 1;\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\tif (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tadd_render_callback(() => dispatch(node, false, 'start'));\n\n\t\tif ('inert' in node) {\n\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\tnode.inert = true;\n\t\t}\n\n\t\tloop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(0, 1);\n\t\t\t\t\tdispatch(node, false, 'end');\n\t\t\t\t\tif (!--group.r) {\n\t\t\t\t\t\t// this will result in `end()` being called,\n\t\t\t\t\t\t// so we don't need to clean up here\n\t\t\t\t\t\trun_all(group.c);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(1 - t, t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\n\tif (is_function(config)) {\n\t\twait().then(() => {\n\t\t\t// @ts-ignore\n\t\t\tconfig = config(options);\n\t\t\tgo();\n\t\t});\n\t} else {\n\t\tgo();\n\t}\n\n\treturn {\n\t\tend(reset) {\n\t\t\tif (reset && 'inert' in node) {\n\t\t\t\tnode.inert = original_inert_value;\n\t\t\t}\n\t\t\tif (reset && config.tick) {\n\t\t\t\tconfig.tick(1, 0);\n\t\t\t}\n\t\t\tif (running) {\n\t\t\t\tif (animation_name) delete_rule(node, animation_name);\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @param {boolean} intro\n * @returns {{ run(b: 0 | 1): void; end(): void; }}\n */\nexport function create_bidirectional_transition(node, fn, params, intro) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'both' };\n\tlet config = fn(node, params, options);\n\tlet t = intro ? 0 : 1;\n\n\t/**\n\t * @type {Program | null} */\n\tlet running_program = null;\n\n\t/**\n\t * @type {PendingProgram | null} */\n\tlet pending_program = null;\n\tlet animation_name = null;\n\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction clear_animation() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @param {PendingProgram} program\n\t * @param {number} duration\n\t * @returns {Program}\n\t */\n\tfunction init(program, duration) {\n\t\tconst d = /** @type {Program['d']} */ (program.b - t);\n\t\tduration *= Math.abs(d);\n\t\treturn {\n\t\t\ta: t,\n\t\t\tb: program.b,\n\t\t\td,\n\t\t\tduration,\n\t\t\tstart: program.start,\n\t\t\tend: program.start + duration,\n\t\t\tgroup: program.group\n\t\t};\n\t}\n\n\t/**\n\t * @param {INTRO | OUTRO} b\n\t * @returns {void}\n\t */\n\tfunction go(b) {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\t/**\n\t\t * @type {PendingProgram} */\n\t\tconst program = {\n\t\t\tstart: now() + delay,\n\t\t\tb\n\t\t};\n\n\t\tif (!b) {\n\t\t\t// @ts-ignore todo: improve typings\n\t\t\tprogram.group = outros;\n\t\t\toutros.r += 1;\n\t\t}\n\n\t\tif ('inert' in node) {\n\t\t\tif (b) {\n\t\t\t\tif (original_inert_value !== undefined) {\n\t\t\t\t\t// aborted/reversed outro — restore previous inert value\n\t\t\t\t\tnode.inert = original_inert_value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\t\tnode.inert = true;\n\t\t\t}\n\t\t}\n\n\t\tif (running_program || pending_program) {\n\t\t\tpending_program = program;\n\t\t} else {\n\t\t\t// if this is an intro, and there's a delay, we need to do\n\t\t\t// an initial tick and/or apply CSS animation immediately\n\t\t\tif (css) {\n\t\t\t\tclear_animation();\n\t\t\t\tanimation_name = create_rule(node, t, b, duration, delay, easing, css);\n\t\t\t}\n\t\t\tif (b) tick(0, 1);\n\t\t\trunning_program = init(program, duration);\n\t\t\tadd_render_callback(() => dispatch(node, b, 'start'));\n\t\t\tloop((now) => {\n\t\t\t\tif (pending_program && now > pending_program.start) {\n\t\t\t\t\trunning_program = init(pending_program, duration);\n\t\t\t\t\tpending_program = null;\n\t\t\t\t\tdispatch(node, running_program.b, 'start');\n\t\t\t\t\tif (css) {\n\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\tanimation_name = create_rule(\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\trunning_program.b,\n\t\t\t\t\t\t\trunning_program.duration,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\teasing,\n\t\t\t\t\t\t\tconfig.css\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (running_program) {\n\t\t\t\t\tif (now >= running_program.end) {\n\t\t\t\t\t\ttick((t = running_program.b), 1 - t);\n\t\t\t\t\t\tdispatch(node, running_program.b, 'end');\n\t\t\t\t\t\tif (!pending_program) {\n\t\t\t\t\t\t\t// we're done\n\t\t\t\t\t\t\tif (running_program.b) {\n\t\t\t\t\t\t\t\t// intro — we can tidy up immediately\n\t\t\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// outro — needs to be coordinated\n\t\t\t\t\t\t\t\tif (!--running_program.group.r) run_all(running_program.group.c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trunning_program = null;\n\t\t\t\t\t} else if (now >= running_program.start) {\n\t\t\t\t\t\tconst p = now - running_program.start;\n\t\t\t\t\t\tt = running_program.a + running_program.d * easing(p / running_program.duration);\n\t\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !!(running_program || pending_program);\n\t\t\t});\n\t\t}\n\t}\n\treturn {\n\t\trun(b) {\n\t\t\tif (is_function(config)) {\n\t\t\t\twait().then(() => {\n\t\t\t\t\tconst opts = { direction: b ? 'in' : 'out' };\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconfig = config(opts);\n\t\t\t\t\tgo(b);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgo(b);\n\t\t\t}\n\t\t},\n\t\tend() {\n\t\t\tclear_animation();\n\t\t\trunning_program = pending_program = null;\n\t\t}\n\t};\n}\n\n/** @typedef {1} INTRO */\n/** @typedef {0} OUTRO */\n/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */\n/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */\n\n/**\n * @typedef {Object} Outro\n * @property {number} r\n * @property {Function[]} c\n * @property {Object} p\n */\n\n/**\n * @typedef {Object} PendingProgram\n * @property {number} start\n * @property {INTRO|OUTRO} b\n * @property {Outro} [group]\n */\n\n/**\n * @typedef {Object} Program\n * @property {number} a\n * @property {INTRO|OUTRO} b\n * @property {1|-1} d\n * @property {number} duration\n * @property {number} start\n * @property {number} end\n * @property {Outro} [group]\n */\n","import { transition_in, transition_out } from './transitions.js';\nimport { run_all } from './utils.js';\n\n// general each functions:\n\nexport function ensure_array_like(array_like_or_iterator) {\n\treturn array_like_or_iterator?.length !== undefined\n\t\t? array_like_or_iterator\n\t\t: Array.from(array_like_or_iterator);\n}\n\n// keyed each functions:\n\n/** @returns {void} */\nexport function destroy_block(block, lookup) {\n\tblock.d(1);\n\tlookup.delete(block.key);\n}\n\n/** @returns {void} */\nexport function outro_and_destroy_block(block, lookup) {\n\ttransition_out(block, 1, 1, () => {\n\t\tlookup.delete(block.key);\n\t});\n}\n\n/** @returns {void} */\nexport function fix_and_destroy_block(block, lookup) {\n\tblock.f();\n\tdestroy_block(block, lookup);\n}\n\n/** @returns {void} */\nexport function fix_and_outro_and_destroy_block(block, lookup) {\n\tblock.f();\n\toutro_and_destroy_block(block, lookup);\n}\n\n/** @returns {any[]} */\nexport function update_keyed_each(\n\told_blocks,\n\tdirty,\n\tget_key,\n\tdynamic,\n\tctx,\n\tlist,\n\tlookup,\n\tnode,\n\tdestroy,\n\tcreate_each_block,\n\tnext,\n\tget_context\n) {\n\tlet o = old_blocks.length;\n\tlet n = list.length;\n\tlet i = o;\n\tconst old_indexes = {};\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\n\tconst new_blocks = [];\n\tconst new_lookup = new Map();\n\tconst deltas = new Map();\n\tconst updates = [];\n\ti = n;\n\twhile (i--) {\n\t\tconst child_ctx = get_context(ctx, list, i);\n\t\tconst key = get_key(child_ctx);\n\t\tlet block = lookup.get(key);\n\t\tif (!block) {\n\t\t\tblock = create_each_block(key, child_ctx);\n\t\t\tblock.c();\n\t\t} else if (dynamic) {\n\t\t\t// defer updates until all the DOM shuffling is done\n\t\t\tupdates.push(() => block.p(child_ctx, dirty));\n\t\t}\n\t\tnew_lookup.set(key, (new_blocks[i] = block));\n\t\tif (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));\n\t}\n\tconst will_move = new Set();\n\tconst did_move = new Set();\n\t/** @returns {void} */\n\tfunction insert(block) {\n\t\ttransition_in(block, 1);\n\t\tblock.m(node, next);\n\t\tlookup.set(block.key, block);\n\t\tnext = block.first;\n\t\tn--;\n\t}\n\twhile (o && n) {\n\t\tconst new_block = new_blocks[n - 1];\n\t\tconst old_block = old_blocks[o - 1];\n\t\tconst new_key = new_block.key;\n\t\tconst old_key = old_block.key;\n\t\tif (new_block === old_block) {\n\t\t\t// do nothing\n\t\t\tnext = new_block.first;\n\t\t\to--;\n\t\t\tn--;\n\t\t} else if (!new_lookup.has(old_key)) {\n\t\t\t// remove old block\n\t\t\tdestroy(old_block, lookup);\n\t\t\to--;\n\t\t} else if (!lookup.has(new_key) || will_move.has(new_key)) {\n\t\t\tinsert(new_block);\n\t\t} else if (did_move.has(old_key)) {\n\t\t\to--;\n\t\t} else if (deltas.get(new_key) > deltas.get(old_key)) {\n\t\t\tdid_move.add(new_key);\n\t\t\tinsert(new_block);\n\t\t} else {\n\t\t\twill_move.add(old_key);\n\t\t\to--;\n\t\t}\n\t}\n\twhile (o--) {\n\t\tconst old_block = old_blocks[o];\n\t\tif (!new_lookup.has(old_block.key)) destroy(old_block, lookup);\n\t}\n\twhile (n) insert(new_blocks[n - 1]);\n\trun_all(updates);\n\treturn new_blocks;\n}\n\n/** @returns {void} */\nexport function validate_each_keys(ctx, list, get_context, get_key) {\n\tconst keys = new Map();\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst key = get_key(get_context(ctx, list, i));\n\t\tif (keys.has(key)) {\n\t\t\tlet value = '';\n\t\t\ttry {\n\t\t\t\tvalue = `with value '${String(key)}' `;\n\t\t\t} catch (e) {\n\t\t\t\t// can't stringify\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(\n\t\t\t\t\tkey\n\t\t\t\t)} and ${i} ${value}are duplicates`\n\t\t\t);\n\t\t}\n\t\tkeys.set(key, i);\n\t}\n}\n","import {\n\tadd_render_callback,\n\tflush,\n\tflush_render_callbacks,\n\tschedule_update,\n\tdirty_components\n} from './scheduler.js';\nimport { current_component, set_current_component } from './lifecycle.js';\nimport { blank_object, is_empty, is_function, run, run_all, noop } from './utils.js';\nimport {\n\tchildren,\n\tdetach,\n\tstart_hydrating,\n\tend_hydrating,\n\tget_custom_elements_slots,\n\tinsert,\n\telement,\n\tattr\n} from './dom.js';\nimport { transition_in } from './transitions.js';\n\n/** @returns {void} */\nexport function bind(component, name, callback) {\n\tconst index = component.$$.props[name];\n\tif (index !== undefined) {\n\t\tcomponent.$$.bound[index] = callback;\n\t\tcallback(component.$$.ctx[index]);\n\t}\n}\n\n/** @returns {void} */\nexport function create_component(block) {\n\tblock && block.c();\n}\n\n/** @returns {void} */\nexport function claim_component(block, parent_nodes) {\n\tblock && block.l(parent_nodes);\n}\n\n/** @returns {void} */\nexport function mount_component(component, target, anchor) {\n\tconst { fragment, after_update } = component.$$;\n\tfragment && fragment.m(target, anchor);\n\t// onMount happens before the initial afterUpdate\n\tadd_render_callback(() => {\n\t\tconst new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n\t\t// if the component was destroyed immediately\n\t\t// it will update the `$$.on_destroy` reference to `null`.\n\t\t// the destructured on_destroy may still reference to the old array\n\t\tif (component.$$.on_destroy) {\n\t\t\tcomponent.$$.on_destroy.push(...new_on_destroy);\n\t\t} else {\n\t\t\t// Edge case - component was destroyed immediately,\n\t\t\t// most likely as a result of a binding initialising\n\t\t\trun_all(new_on_destroy);\n\t\t}\n\t\tcomponent.$$.on_mount = [];\n\t});\n\tafter_update.forEach(add_render_callback);\n}\n\n/** @returns {void} */\nexport function destroy_component(component, detaching) {\n\tconst $$ = component.$$;\n\tif ($$.fragment !== null) {\n\t\tflush_render_callbacks($$.after_update);\n\t\trun_all($$.on_destroy);\n\t\t$$.fragment && $$.fragment.d(detaching);\n\t\t// TODO null out other refs, including component.$$ (but need to\n\t\t// preserve final state?)\n\t\t$$.on_destroy = $$.fragment = null;\n\t\t$$.ctx = [];\n\t}\n}\n\n/** @returns {void} */\nfunction make_dirty(component, i) {\n\tif (component.$$.dirty[0] === -1) {\n\t\tdirty_components.push(component);\n\t\tschedule_update();\n\t\tcomponent.$$.dirty.fill(0);\n\t}\n\tcomponent.$$.dirty[(i / 31) | 0] |= 1 << i % 31;\n}\n\n// TODO: Document the other params\n/**\n * @param {SvelteComponent} component\n * @param {import('./public.js').ComponentConstructorOptions} options\n *\n * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.\n * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.\n * This will be the `add_css` function from the compiled component.\n *\n * @returns {void}\n */\nexport function init(\n\tcomponent,\n\toptions,\n\tinstance,\n\tcreate_fragment,\n\tnot_equal,\n\tprops,\n\tappend_styles = null,\n\tdirty = [-1]\n) {\n\tconst parent_component = current_component;\n\tset_current_component(component);\n\t/** @type {import('./private.js').T$$} */\n\tconst $$ = (component.$$ = {\n\t\tfragment: null,\n\t\tctx: [],\n\t\t// state\n\t\tprops,\n\t\tupdate: noop,\n\t\tnot_equal,\n\t\tbound: blank_object(),\n\t\t// lifecycle\n\t\ton_mount: [],\n\t\ton_destroy: [],\n\t\ton_disconnect: [],\n\t\tbefore_update: [],\n\t\tafter_update: [],\n\t\tcontext: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n\t\t// everything else\n\t\tcallbacks: blank_object(),\n\t\tdirty,\n\t\tskip_bound: false,\n\t\troot: options.target || parent_component.$$.root\n\t});\n\tappend_styles && append_styles($$.root);\n\tlet ready = false;\n\t$$.ctx = instance\n\t\t? instance(component, options.props || {}, (i, ret, ...rest) => {\n\t\t\t\tconst value = rest.length ? rest[0] : ret;\n\t\t\t\tif ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {\n\t\t\t\t\tif (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);\n\t\t\t\t\tif (ready) make_dirty(component, i);\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t  })\n\t\t: [];\n\t$$.update();\n\tready = true;\n\trun_all($$.before_update);\n\t// `false` as a special case of no DOM component\n\t$$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n\tif (options.target) {\n\t\tif (options.hydrate) {\n\t\t\tstart_hydrating();\n\t\t\t// TODO: what is the correct type here?\n\t\t\t// @ts-expect-error\n\t\t\tconst nodes = children(options.target);\n\t\t\t$$.fragment && $$.fragment.l(nodes);\n\t\t\tnodes.forEach(detach);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t$$.fragment && $$.fragment.c();\n\t\t}\n\t\tif (options.intro) transition_in(component.$$.fragment);\n\t\tmount_component(component, options.target, options.anchor);\n\t\tend_hydrating();\n\t\tflush();\n\t}\n\tset_current_component(parent_component);\n}\n\nexport let SvelteElement;\n\nif (typeof HTMLElement === 'function') {\n\tSvelteElement = class extends HTMLElement {\n\t\t/** The Svelte component constructor */\n\t\t$$ctor;\n\t\t/** Slots */\n\t\t$$s;\n\t\t/** The Svelte component instance */\n\t\t$$c;\n\t\t/** Whether or not the custom element is connected */\n\t\t$$cn = false;\n\t\t/** Component props data */\n\t\t$$d = {};\n\t\t/** `true` if currently in the process of reflecting component props back to attributes */\n\t\t$$r = false;\n\t\t/** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */\n\t\t$$p_d = {};\n\t\t/** @type {Record<string, Function[]>} Event listeners */\n\t\t$$l = {};\n\t\t/** @type {Map<Function, Function>} Event listener unsubscribe functions */\n\t\t$$l_u = new Map();\n\n\t\tconstructor($$componentCtor, $$slots, use_shadow_dom) {\n\t\t\tsuper();\n\t\t\tthis.$$ctor = $$componentCtor;\n\t\t\tthis.$$s = $$slots;\n\t\t\tif (use_shadow_dom) {\n\t\t\t\tthis.attachShadow({ mode: 'open' });\n\t\t\t}\n\t\t}\n\n\t\taddEventListener(type, listener, options) {\n\t\t\t// We can't determine upfront if the event is a custom event or not, so we have to\n\t\t\t// listen to both. If someone uses a custom event with the same name as a regular\n\t\t\t// browser event, this fires twice - we can't avoid that.\n\t\t\tthis.$$l[type] = this.$$l[type] || [];\n\t\t\tthis.$$l[type].push(listener);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t}\n\t\t\tsuper.addEventListener(type, listener, options);\n\t\t}\n\n\t\tremoveEventListener(type, listener, options) {\n\t\t\tsuper.removeEventListener(type, listener, options);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$l_u.get(listener);\n\t\t\t\tif (unsub) {\n\t\t\t\t\tunsub();\n\t\t\t\t\tthis.$$l_u.delete(listener);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tasync connectedCallback() {\n\t\t\tthis.$$cn = true;\n\t\t\tif (!this.$$c) {\n\t\t\t\t// We wait one tick to let possible child slot elements be created/mounted\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tif (!this.$$cn || this.$$c) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfunction create_slot(name) {\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tlet node;\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\tc: function create() {\n\t\t\t\t\t\t\t\tnode = element('slot');\n\t\t\t\t\t\t\t\tif (name !== 'default') {\n\t\t\t\t\t\t\t\t\tattr(node, 'name', name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {HTMLElement} target\n\t\t\t\t\t\t\t * @param {HTMLElement} [anchor]\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tm: function mount(target, anchor) {\n\t\t\t\t\t\t\t\tinsert(target, node, anchor);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\td: function destroy(detaching) {\n\t\t\t\t\t\t\t\tif (detaching) {\n\t\t\t\t\t\t\t\t\tdetach(node);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn obj;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst $$slots = {};\n\t\t\t\tconst existing_slots = get_custom_elements_slots(this);\n\t\t\t\tfor (const name of this.$$s) {\n\t\t\t\t\tif (name in existing_slots) {\n\t\t\t\t\t\t$$slots[name] = [create_slot(name)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const attribute of this.attributes) {\n\t\t\t\t\t// this.$$data takes precedence over this.attributes\n\t\t\t\t\tconst name = this.$$g_p(attribute.name);\n\t\t\t\t\tif (!(name in this.$$d)) {\n\t\t\t\t\t\tthis.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, 'toProp');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Port over props that were set programmatically before ce was initialized\n\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\tif (!(key in this.$$d) && this[key] !== undefined) {\n\t\t\t\t\t\tthis.$$d[key] = this[key]; // don't transform, these were set through JavaScript\n\t\t\t\t\t\tdelete this[key]; // remove the property that shadows the getter/setter\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$c = new this.$$ctor({\n\t\t\t\t\ttarget: this.shadowRoot || this,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...this.$$d,\n\t\t\t\t\t\t$$slots,\n\t\t\t\t\t\t$$scope: {\n\t\t\t\t\t\t\tctx: []\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Reflect component props as attributes\n\t\t\t\tconst reflect_attributes = () => {\n\t\t\t\t\tthis.$$r = true;\n\t\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\t\tthis.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];\n\t\t\t\t\t\tif (this.$$p_d[key].reflect) {\n\t\t\t\t\t\t\tconst attribute_value = get_custom_element_value(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tthis.$$d[key],\n\t\t\t\t\t\t\t\tthis.$$p_d,\n\t\t\t\t\t\t\t\t'toAttribute'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (attribute_value == null) {\n\t\t\t\t\t\t\t\tthis.removeAttribute(this.$$p_d[key].attribute || key);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.setAttribute(this.$$p_d[key].attribute || key, attribute_value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.$$r = false;\n\t\t\t\t};\n\t\t\t\tthis.$$c.$$.after_update.push(reflect_attributes);\n\t\t\t\treflect_attributes(); // once initially because after_update is added too late for first render\n\n\t\t\t\tfor (const type in this.$$l) {\n\t\t\t\t\tfor (const listener of this.$$l[type]) {\n\t\t\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$l = {};\n\t\t\t}\n\t\t}\n\n\t\t// We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte\n\t\t// and setting attributes through setAttribute etc, this is helpful\n\t\tattributeChangedCallback(attr, _oldValue, newValue) {\n\t\t\tif (this.$$r) return;\n\t\t\tattr = this.$$g_p(attr);\n\t\t\tthis.$$d[attr] = get_custom_element_value(attr, newValue, this.$$p_d, 'toProp');\n\t\t\tthis.$$c?.$set({ [attr]: this.$$d[attr] });\n\t\t}\n\n\t\tdisconnectedCallback() {\n\t\t\tthis.$$cn = false;\n\t\t\t// In a microtask, because this could be a move within the DOM\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tif (!this.$$cn && this.$$c) {\n\t\t\t\t\tthis.$$c.$destroy();\n\t\t\t\t\tthis.$$c = undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t$$g_p(attribute_name) {\n\t\t\treturn (\n\t\t\t\tObject.keys(this.$$p_d).find(\n\t\t\t\t\t(key) =>\n\t\t\t\t\t\tthis.$$p_d[key].attribute === attribute_name ||\n\t\t\t\t\t\t(!this.$$p_d[key].attribute && key.toLowerCase() === attribute_name)\n\t\t\t\t) || attribute_name\n\t\t\t);\n\t\t}\n\t};\n}\n\n/**\n * @param {string} prop\n * @param {any} value\n * @param {Record<string, CustomElementPropDefinition>} props_definition\n * @param {'toAttribute' | 'toProp'} [transform]\n */\nfunction get_custom_element_value(prop, value, props_definition, transform) {\n\tconst type = props_definition[prop]?.type;\n\tvalue = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;\n\tif (!transform || !props_definition[prop]) {\n\t\treturn value;\n\t} else if (transform === 'toAttribute') {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value == null ? null : JSON.stringify(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value ? '' : null;\n\t\t\tcase 'Number':\n\t\t\t\treturn value == null ? null : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t} else {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value && JSON.parse(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value; // conversion already handled above\n\t\t\tcase 'Number':\n\t\t\t\treturn value != null ? +value : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n}\n\n/**\n * @internal\n *\n * Turn a Svelte component into a custom element.\n * @param {import('./public.js').ComponentType} Component  A Svelte component constructor\n * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe\n * @param {string[]} slots  The slots to create\n * @param {string[]} accessors  Other accessors besides the ones for props the component has\n * @param {boolean} use_shadow_dom  Whether to use shadow DOM\n * @param {(ce: new () => HTMLElement) => new () => HTMLElement} [extend]\n */\nexport function create_custom_element(\n\tComponent,\n\tprops_definition,\n\tslots,\n\taccessors,\n\tuse_shadow_dom,\n\textend\n) {\n\tlet Class = class extends SvelteElement {\n\t\tconstructor() {\n\t\t\tsuper(Component, slots, use_shadow_dom);\n\t\t\tthis.$$p_d = props_definition;\n\t\t}\n\t\tstatic get observedAttributes() {\n\t\t\treturn Object.keys(props_definition).map((key) =>\n\t\t\t\t(props_definition[key].attribute || key).toLowerCase()\n\t\t\t);\n\t\t}\n\t};\n\tObject.keys(props_definition).forEach((prop) => {\n\t\tObject.defineProperty(Class.prototype, prop, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tvalue = get_custom_element_value(prop, value, props_definition);\n\t\t\t\tthis.$$d[prop] = value;\n\t\t\t\tthis.$$c?.$set({ [prop]: value });\n\t\t\t}\n\t\t});\n\t});\n\taccessors.forEach((accessor) => {\n\t\tObject.defineProperty(Class.prototype, accessor, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c?.[accessor];\n\t\t\t}\n\t\t});\n\t});\n\tif (extend) {\n\t\t// @ts-expect-error - assigning here is fine\n\t\tClass = extend(Class);\n\t}\n\tComponent.element = /** @type {any} */ (Class);\n\treturn Class;\n}\n\n/**\n * Base class for Svelte components. Used when dev=false.\n *\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n */\nexport class SvelteComponent {\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$ = undefined;\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$set = undefined;\n\n\t/** @returns {void} */\n\t$destroy() {\n\t\tdestroy_component(this, 1);\n\t\tthis.$destroy = noop;\n\t}\n\n\t/**\n\t * @template {Extract<keyof Events, string>} K\n\t * @param {K} type\n\t * @param {((e: Events[K]) => void) | null | undefined} callback\n\t * @returns {() => void}\n\t */\n\t$on(type, callback) {\n\t\tif (!is_function(callback)) {\n\t\t\treturn noop;\n\t\t}\n\t\tconst callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\n\t\tcallbacks.push(callback);\n\t\treturn () => {\n\t\t\tconst index = callbacks.indexOf(callback);\n\t\t\tif (index !== -1) callbacks.splice(index, 1);\n\t\t};\n\t}\n\n\t/**\n\t * @param {Partial<Props>} props\n\t * @returns {void}\n\t */\n\t$set(props) {\n\t\tif (this.$$set && !is_empty(props)) {\n\t\t\tthis.$$.skip_bound = true;\n\t\t\tthis.$$set(props);\n\t\t\tthis.$$.skip_bound = false;\n\t\t}\n\t}\n}\n\n/**\n * @typedef {Object} CustomElementPropDefinition\n * @property {string} [attribute]\n * @property {boolean} [reflect]\n * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]\n */\n","<script>\n  import { onMount, tick } from 'svelte';\n  import { marked } from 'marked';\n\n  export let title = 'AI Sales Assistant';\n  export let apiUrl;\n  export let brandColor = '#00264c';\n  export let initialMessage = 'Ciao, come posso aiutarti?';\n  export let buttonIcon = '💬';\n  export let position = 'bottom-right';\n\n  let isChatVisible = false;\n  let messages = [];\n  let userInput = '';\n  let isLoading = false;\n  let chatMessages;\n\n  const sessionId = generateUUID();\n\n  $: colorScheme = generateColorScheme(brandColor);\n  $: isImageUrl = buttonIcon.match(/\\.(jpeg|jpg|gif|png)$/) != null;\n  $: isSvg = buttonIcon.trim().startsWith('<svg');\n\n  function toggleChat() {\n    isChatVisible = !isChatVisible;\n    if (isChatVisible) {\n      tick().then(() => {\n        if (chatMessages) {\n          chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n      });\n    }\n  }\n\n  function addMessage(rawText, sender) {\n    let content = '';\n    let productCarousel = '';\n    let url = '';\n    if (sender === 'bot') {\n      let jsonResponse = typeof rawText === 'string' ? JSON.parse(rawText) : rawText;\n      content = marked.parse(jsonResponse.response);\n      url = jsonResponse.url || '';\n      if (jsonResponse.products && jsonResponse.products.length > 0) {\n        productCarousel = createProductCarousel(jsonResponse.products);\n      }\n    } else {\n      content = rawText;\n    }\n    messages = [...messages, { content, sender, productCarousel, url }];\n    tick().then(() => {\n      if (sender === 'user') {\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n      }\n    });\n  }\n\n  function createProductCarousel(products) {\n    return `\n      <div class=\"product-carousel\">\n        ${products.map(product => `\n          <div class=\"carousel-product\">\n            <img src=\"${product.immagine}\" alt=\"${product.nome}\">\n            <h4>${product.nome}</h4>\n            <p>${product.prezzo}</p>\n            <a href=\"${addUtmParams(product.url, 'chat', 'chatbot', 'chatbot')}\" target=\"_blank\">Acquista</a>\n          </div>\n        `).join('')}\n      </div>\n    `;\n  }\n\n  function addUtmParams(url, source, medium, campaign) {\n    const urlObj = new URL(url, window.location.origin);\n    urlObj.searchParams.set('utm_source', source);\n    urlObj.searchParams.set('utm_medium', medium);\n    urlObj.searchParams.set('utm_campaign', campaign);\n    return urlObj.toString();\n  }\n\n  async function sendMessage() {\n    const message = userInput.trim();\n    if (message) {\n      addMessage(message, 'user');\n      userInput = '';\n      isLoading = true;\n\n      const params = new URLSearchParams({\n        sessionId: sessionId,\n        action: 'sendMessage',\n        chatInput: message,\n      });\n\n      try {\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: params.toString(),\n        });\n\n        const data = await response.json();\n        addMessage(data, 'bot');\n      } catch (error) {\n        console.error('Error:', error);\n        addMessage('Sorry, there was an error processing your request.', 'bot');\n      } finally {\n        isLoading = false;\n      }\n    }\n  }\n\n  function generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  function generateColorScheme(brandColor) {\n      const r = parseInt(brandColor.slice(1, 3), 16);\n      const g = parseInt(brandColor.slice(3, 5), 16);\n      const b = parseInt(brandColor.slice(5, 7), 16);\n\n      const lighterBackground = `rgba(${r}, ${g}, ${b}, 0.1)`;\n      const textColor = isColorLight(brandColor) ? '#000000' : '#FFFFFF';\n\n      // Generate a contrasting color for the button\n      const buttonColor = generateContrastingColor(brandColor);\n      const buttonTextColor = isColorLight(buttonColor) ? '#000000' : '#FFFFFF';\n\n      return {\n          primaryColor: brandColor,\n          buttonColor: buttonColor,\n          buttonTextColor: buttonTextColor,\n          backgroundColor: lighterBackground,\n          textColor: textColor,\n          loaderColor: brandColor,\n          loaderBackground: lighterBackground\n      };\n  }\n\n  function isColorLight(color) {\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n      const brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n      return brightness > 155;\n  }\n\n  function generateContrastingColor(color) {\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n\n      // Calculate the perceived brightness\n      const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n\n      let newR, newG, newB;\n\n      if (brightness > 128) {\n          // If the color is light, create a darker contrasting color\n          newR = Math.max(0, r - 100);\n          newG = Math.max(0, g - 100);\n          newB = Math.max(0, b - 100);\n      } else {\n          // If the color is dark, create a lighter contrasting color\n          newR = Math.min(255, r + 100);\n          newG = Math.min(255, g + 100);\n          newB = Math.min(255, b + 100);\n      }\n\n      // Ensure the new color has enough contrast\n      const contrastRatio = getContrastRatio(r, g, b, newR, newG, newB);\n      if (contrastRatio < 4.5) {\n          // If contrast is not enough, adjust further\n          if (brightness > 128) {\n              [newR, newG, newB] = [0, 0, 0]; // Go to black for light colors\n          } else {\n              [newR, newG, newB] = [255, 255, 255]; // Go to white for dark colors\n          }\n      }\n\n      return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;\n  }\n\n  function getContrastRatio(r1, g1, b1, r2, g2, b2) {\n      const l1 = 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1;\n      const l2 = 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2;\n      const contrast = l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n      return contrast;\n  }\n\n  onMount(() => {\n    addMessage({\n      response: initialMessage,\n      products: [],\n      url: '',\n    }, 'bot');\n  });\n</script>\n\n<div id=\"chat-widget\"\n     class={position}\n     style:--primary-color={colorScheme.primaryColor}\n     style:--button-color={colorScheme.buttonColor}\n     style:--button-text-color={colorScheme.buttonTextColor}\n     style:--background-color={colorScheme.backgroundColor}\n     style:--text-color={colorScheme.textColor}\n     style:--loader-color={colorScheme.loaderColor}\n     style:--loader-background={colorScheme.loaderBackground}>\n  {#if !isChatVisible}\n    <button id=\"chat-button\" on:click={toggleChat}>\n      {#if isImageUrl}\n        <img src={buttonIcon} alt=\"Chat\" />\n      {:else if isSvg}\n        {@html buttonIcon}\n      {:else}\n        {@html buttonIcon}\n      {/if}\n    </button>\n  {/if}\n\n  {#if isChatVisible}\n    <div id=\"chat-container\">\n      <div id=\"chat-header\">\n        <span>{title}</span>\n        <button id=\"close-chat\" on:click={toggleChat}>×</button>\n      </div>\n      <div id=\"chat-messages\" bind:this={chatMessages}>\n        {#each messages as message}\n          <div class=\"message {message.sender}-message\">\n            {@html message.content}\n          </div>\n          {#if message.url}\n            <a href={addUtmParams(message.url, 'chat', 'chatbot', 'chatbot')} target=\"_blank\" class=\"cta-button\">FAI UN PREVENTIVO</a>\n          {/if}\n          {#if message.productCarousel}\n            {@html message.productCarousel}\n          {/if}\n        {/each}\n        {#if isLoading}\n          <div class=\"loading-container\">\n            <div class=\"loading\"></div>\n          </div>\n        {/if}\n      </div>\n      <div id=\"chat-input\">\n        <input type=\"text\" id=\"user-input\" bind:value={userInput} on:keypress={(e) => e.key === 'Enter' && sendMessage()} placeholder=\"Scrivi un messaggio...\">\n        <button id=\"send-button\" on:click={sendMessage}>Invia</button>\n      </div>\n    </div>\n  {/if}\n</div>\n\n<style>\n#chat-widget {\n  position: fixed;\n  z-index: 1000;\n  font-family: Arial, sans-serif;\n}\n\n.top-left {\n  top: 20px;\n  left: 20px;\n}\n\n.top-right {\n  top: 20px;\n  right: 20px;\n}\n\n.bottom-left {\n  bottom: 20px;\n  left: 20px;\n}\n\n.bottom-right {\n  bottom: 20px;\n  right: 20px;\n}\n\n#chat-button {\n  background-color: var(--primary-color) !important;\n  color: var(--text-color) !important;\n  border: none;\n  border-radius: 50%;\n  width: 60px !important;\n  height: 60px !important;\n  cursor: pointer;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n\n#chat-button img {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: cover;\n}\n\n#chat-container {\n  width: 300px;\n  height: 425px;\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n#chat-header {\n  background-color: var(--primary-color);\n  color: var(--text-color);\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#close-chat {\n  background: none;\n  border: none;\n  color: var(--text-color);\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  background-color: white;\n  color: var(--primary-color);\n}\n\n.message {\n  margin-bottom: 10px;\n  padding: 5px 10px;\n  border-radius: 5px;\n  line-height: 1.5rem;\n  height: auto;\n  width: auto;\n  max-width: 80%;\n  display: block;\n  text-transform: none;\n}\n\n.message a {\n  color: var(--primary-color);\n}\n\n.user-message {\n  background-color: var(--primary-color);\n  color: var(--text-color);\n  margin-left: auto;\n}\n\n.bot-message {\n  background-color: var(--background-color);\n  color: var(--primary-color);\n  align-self: flex-start;\n}\n\n.loading-container {\n  display: flex;\n  justify-content: flex-start;\n  width: 100%;\n  margin-bottom: 10px;\n}\n\n.loading {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  border: 3px solid var(--loader-background);\n  border-top: 3px solid var(--loader-color);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  position: relative;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n#chat-input {\n  display: flex;\n  padding: 10px;\n  background-color: var(--primary-color);\n}\n\n#user-input {\n  flex-grow: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  background-color: white;\n  color: var(--primary-color);\n  font-size: 16px;\n}\n\n#send-button {\n  background-color: var(--button-color);\n  color: var(--button-text-color);\n  border: none;\n  padding: 10px 15px;\n  margin-left: 5px;\n  cursor: pointer;\n  border-radius: 3px;\n  text-wrap: nowrap;\n  min-width: 60px;\n}\n\n.cta-button {\n  display: inline-block;\n  background-color: var(--primary-color);\n  color: var(--text-color);\n  padding: 8px 12px;\n  border-radius: 20px;\n  text-decoration: none;\n  margin-bottom: 10px;\n  font-size: 14px;\n  text-align: center;\n  width: 100%;\n  box-sizing: border-box;\n  transition: background-color 0.3s, color 0.3s;\n}\n\n.cta-button:hover {\n  background-color: var(--button-color);\n  color: var(--button-text-color);\n}\n\n:global(.product-carousel) {\n  display: flex;\n  overflow-x: auto;\n  padding: 10px 0;\n  margin-top: 10px;\n}\n\n:global(.carousel-product) {\n  flex: 0 0 auto;\n  width: 150px;\n  margin-right: 10px;\n  border: 1px solid var(--primary-color);\n  border-radius: 5px;\n  padding: 10px;\n  text-align: center;\n}\n\n:global(.carousel-product img) {\n  width: 100%;\n  height: 100px;\n  object-fit: cover;\n  margin-bottom: 5px;\n}\n\n:global(.carousel-product h4) {\n  margin: 5px 0;\n  font-size: 14px;\n  color: var(--primary-color);\n}\n\n:global(.carousel-product p) {\n  margin: 5px 0;\n  font-weight: bold;\n  color: var(--primary-color);\n}\n\n:global(.carousel-product a) {\n  background-color: var(--primary-color);\n  color: var(--text-color);\n  border: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  border-radius: 3px;\n  font-size: 12px;\n  text-decoration: none;\n  display: inline-block;\n  margin-top: 10px;\n}\n</style>","import { PUBLIC_VERSION } from '../../../shared/version.js';\n\nif (typeof window !== 'undefined')\n\t// @ts-ignore\n\t(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);\n","// generated during release, do not modify\n\n/**\n * The current version, as set in package.json.\n *\n * https://svelte.dev/docs/svelte-compiler#svelte-version\n * @type {string}\n */\nexport const VERSION = '4.2.19';\nexport const PUBLIC_VERSION = '4';\n","import { marked } from 'marked';\nimport AIChatWidget from \"./AIChatWidget.svelte\";\n\n// Create a new div element to host our Svelte component\nconst targetDiv = document.createElement(\"div\");\n\n// Get the current script tag\nconst currentScript = document.currentScript;\n\n// Insert the new div before the script tag\ncurrentScript.parentNode.insertBefore(targetDiv, currentScript);\n\n// Function to get attribute value with a default\nfunction getAttr(name, defaultValue) {\n    const value = currentScript.getAttribute(name);\n    return value !== null ? value : defaultValue;\n}\n\n// Function to get position with a default\nfunction getPosition(defaultValue) {\n    const position = currentScript.getAttribute('data-position');\n    return ['top-left', 'top-right', 'bottom-left', 'bottom-right'].includes(position) ? position : defaultValue;\n}\n\n// Instantiate the Svelte component\nconst chatWidget = new AIChatWidget({\n    target: targetDiv,\n    props: {\n        title: getAttr('data-title', 'AI Sales Assistant'),\n        apiUrl: getAttr('data-api-url', 'https://your-default-api-url.com'),\n        brandColor: getAttr('data-brand-color', '#00264c'),\n        initialMessage: getAttr('data-initial-message', 'Ciao, come posso aiutarti?'),\n        buttonIcon: getAttr('data-button-icon', '💬'),\n        position: getPosition('bottom-right'),\n    }\n});\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","rules","constructor","this","space","src","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","list","bull","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","blankLine","indent","trimStart","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","toLowerCase","table","headers","aligns","rows","item","header","align","row","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","inlineNormal","blockSkip","reflinkSearch","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","cutSrc","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","parser","langString","parse","parseInline","body","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","markedInstance","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","marked","noop","run","fn","blank_object","run_all","fns","is_function","thing","safe_not_equal","a","src_url_equal_anchor","current_component","src_url_equal","element_src","document","createElement","null_to_empty","value","append","target","appendChild","append_styles","style_sheet_id","styles","append_styles_to","root","getRootNode","ownerDocument","host","get_root_for_style","getElementById","style","element","id","textContent","head","sheet","append_stylesheet","insert","anchor","insertBefore","detach","parentNode","removeChild","data","createTextNode","empty","listen","event","handler","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_input_value","input","set_style","key","important","removeProperty","setProperty","getDefaults","HtmlTag","is_svg","undefined","n","h","m","createElementNS","nodeType","nodeName","tagName","innerHTML","Array","from","childNodes","p","d","set_current_component","component","onMount","get_current_component","$$","on_mount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","update_scheduled","schedule_update","flush","tick","add_render_callback","seen_callbacks","flushidx","saved_component","update","add","clear","fragment","before_update","dirty","ctx","after_update","outroing","ensure_array_like","array_like_or_iterator","destroy_component","detaching","filtered","targets","flush_render_callbacks","on_destroy","init","instance","create_fragment","not_equal","props","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","ready","rest","fill","make_dirty","hydrate","nodes","children","intro","local","delete","transition_in","new_on_destroy","mount_component","SvelteComponent","$$set","$destroy","$on","$set","create_if_block_5","create_if_block_6","button","img","img_src_value","create_if_block_1","div3","div0","span","button0","div1","div2","button1","iterations","addUtmParams","raw_value","productCarousel","html_tag","if_block0","create_if_block_3","if_block1","create_if_block_2","div","div_class_value","sender","create_if_block_4","create_if_block","primaryColor","buttonColor","buttonTextColor","backgroundColor","textColor","loaderColor","loaderBackground","medium","campaign","urlObj","URL","window","location","origin","searchParams","set","generateColorScheme","brandColor","lighterBackground","parseInt","isColorLight","color","r","g","brightness","newR","newG","newB","max","contrastRatio","r1","g1","b1","r2","g2","b2","l1","l2","getContrastRatio","padStart","generateContrastingColor","chatMessages","$$props","apiUrl","initialMessage","buttonIcon","position","isChatVisible","messages","userInput","isLoading","sessionId","random","addMessage","rawText","jsonResponse","JSON","response","products","product","immagine","nome","prezzo","$$invalidate","scrollTop","scrollHeight","sendMessage","params","URLSearchParams","action","chatInput","fetch","method","json","colorScheme","isImageUrl","isSvg","startsWith","$$value","__svelte","v","targetDiv","currentScript","getAttr","defaultValue","getPosition"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,9,10]}